<?php
class Twig_Tests_LexerTest extends PHPUnit_Framework_TestCase { public function testNameLabelForTag() { $spe32893 = '{% ยง %}'; $sped078a = new Twig_Lexer(new Twig_Environment()); $sp8ec2ac = $sped078a->tokenize($spe32893); $sp8ec2ac->expect(Twig_Token::BLOCK_START_TYPE); $this->assertSame('ยง', $sp8ec2ac->expect(Twig_Token::NAME_TYPE)->getValue()); } public function testNameLabelForFunction() { $spe32893 = '{{ ยง() }}'; $sped078a = new Twig_Lexer(new Twig_Environment()); $sp8ec2ac = $sped078a->tokenize($spe32893); $sp8ec2ac->expect(Twig_Token::VAR_START_TYPE); $this->assertSame('ยง', $sp8ec2ac->expect(Twig_Token::NAME_TYPE)->getValue()); } public function testBracketsNesting() { $spe32893 = '{{ {"a":{"b":"c"}} }}'; $this->assertEquals(2, $this->countToken($spe32893, Twig_Token::PUNCTUATION_TYPE, '{')); $this->assertEquals(2, $this->countToken($spe32893, Twig_Token::PUNCTUATION_TYPE, '}')); } protected function countToken($spe32893, $sp32ff7e, $spbb4d96 = null) { $sped078a = new Twig_Lexer(new Twig_Environment()); $sp8ec2ac = $sped078a->tokenize($spe32893); $spffdcfa = 0; while (!$sp8ec2ac->isEOF()) { $sp650e38 = $sp8ec2ac->next(); if ($sp32ff7e === $sp650e38->getType()) { if (null === $spbb4d96 || $spbb4d96 === $sp650e38->getValue()) { ++$spffdcfa; } } } return $spffdcfa; } public function testLineDirective() { $spe32893 = 'foo
' . 'bar
' . '{% line 10 %}
' . '{{
' . 'baz
' . '}}
'; $sped078a = new Twig_Lexer(new Twig_Environment()); $sp8ec2ac = $sped078a->tokenize($spe32893); $this->assertSame(1, $sp8ec2ac->expect(Twig_Token::TEXT_TYPE)->getLine()); $this->assertSame(10, $sp8ec2ac->expect(Twig_Token::TEXT_TYPE)->getLine()); $this->assertSame(11, $sp8ec2ac->expect(Twig_Token::VAR_START_TYPE)->getLine()); $this->assertSame(12, $sp8ec2ac->expect(Twig_Token::NAME_TYPE)->getLine()); } public function testLineDirectiveInline() { $spe32893 = 'foo
' . 'bar{% line 10 %}{{
' . 'baz
' . '}}
'; $sped078a = new Twig_Lexer(new Twig_Environment()); $sp8ec2ac = $sped078a->tokenize($spe32893); $this->assertSame(1, $sp8ec2ac->expect(Twig_Token::TEXT_TYPE)->getLine()); $this->assertSame(10, $sp8ec2ac->expect(Twig_Token::VAR_START_TYPE)->getLine()); $this->assertSame(11, $sp8ec2ac->expect(Twig_Token::NAME_TYPE)->getLine()); } public function testLongComments() { $spe32893 = '{# ' . str_repeat('*', 100000) . ' #}'; $sped078a = new Twig_Lexer(new Twig_Environment()); $sped078a->tokenize($spe32893); } public function testLongRaw() { $spe32893 = '{% raw %}' . str_repeat('*', 100000) . '{% endraw %}'; $sped078a = new Twig_Lexer(new Twig_Environment()); $sped078a->tokenize($spe32893); } public function testLongVar() { $spe32893 = '{{ ' . str_repeat('x', 100000) . ' }}'; $sped078a = new Twig_Lexer(new Twig_Environment()); $sped078a->tokenize($spe32893); } public function testLongBlock() { $spe32893 = '{% ' . str_repeat('x', 100000) . ' %}'; $sped078a = new Twig_Lexer(new Twig_Environment()); $sped078a->tokenize($spe32893); } public function testBigNumbers() { $spe32893 = '{{ 922337203685477580700 }}'; $sped078a = new Twig_Lexer(new Twig_Environment()); $sp8ec2ac = $sped078a->tokenize($spe32893); $sp8ec2ac->next(); $spcefb62 = $sp8ec2ac->next(); $this->assertEquals('922337203685477580700', $spcefb62->getValue()); } public function testStringWithEscapedDelimiter() { $sp754928 = array('{{ \'foo \\\' bar\' }}' => 'foo \' bar', '{{ "foo \\" bar" }}' => 'foo " bar'); $sped078a = new Twig_Lexer(new Twig_Environment()); foreach ($sp754928 as $spe32893 => $spc4a4e4) { $sp8ec2ac = $sped078a->tokenize($spe32893); $sp8ec2ac->expect(Twig_Token::VAR_START_TYPE); $sp8ec2ac->expect(Twig_Token::STRING_TYPE, $spc4a4e4); } } public function testStringWithInterpolation() { $spe32893 = 'foo {{ "bar #{ baz + 1 }" }}'; $sped078a = new Twig_Lexer(new Twig_Environment()); $sp8ec2ac = $sped078a->tokenize($spe32893); $sp8ec2ac->expect(Twig_Token::TEXT_TYPE, 'foo '); $sp8ec2ac->expect(Twig_Token::VAR_START_TYPE); $sp8ec2ac->expect(Twig_Token::STRING_TYPE, 'bar '); $sp8ec2ac->expect(Twig_Token::INTERPOLATION_START_TYPE); $sp8ec2ac->expect(Twig_Token::NAME_TYPE, 'baz'); $sp8ec2ac->expect(Twig_Token::OPERATOR_TYPE, '+'); $sp8ec2ac->expect(Twig_Token::NUMBER_TYPE, '1'); $sp8ec2ac->expect(Twig_Token::INTERPOLATION_END_TYPE); $sp8ec2ac->expect(Twig_Token::VAR_END_TYPE); } public function testStringWithEscapedInterpolation() { $spe32893 = '{{ "bar \\#{baz+1}" }}'; $sped078a = new Twig_Lexer(new Twig_Environment()); $sp8ec2ac = $sped078a->tokenize($spe32893); $sp8ec2ac->expect(Twig_Token::VAR_START_TYPE); $sp8ec2ac->expect(Twig_Token::STRING_TYPE, 'bar #{baz+1}'); $sp8ec2ac->expect(Twig_Token::VAR_END_TYPE); } public function testStringWithHash() { $spe32893 = '{{ "bar # baz" }}'; $sped078a = new Twig_Lexer(new Twig_Environment()); $sp8ec2ac = $sped078a->tokenize($spe32893); $sp8ec2ac->expect(Twig_Token::VAR_START_TYPE); $sp8ec2ac->expect(Twig_Token::STRING_TYPE, 'bar # baz'); $sp8ec2ac->expect(Twig_Token::VAR_END_TYPE); } public function testStringWithUnterminatedInterpolation() { $spe32893 = '{{ "bar #{x" }}'; $sped078a = new Twig_Lexer(new Twig_Environment()); $sped078a->tokenize($spe32893); } public function testStringWithNestedInterpolations() { $spe32893 = '{{ "bar #{ "foo#{bar}" }" }}'; $sped078a = new Twig_Lexer(new Twig_Environment()); $sp8ec2ac = $sped078a->tokenize($spe32893); $sp8ec2ac->expect(Twig_Token::VAR_START_TYPE); $sp8ec2ac->expect(Twig_Token::STRING_TYPE, 'bar '); $sp8ec2ac->expect(Twig_Token::INTERPOLATION_START_TYPE); $sp8ec2ac->expect(Twig_Token::STRING_TYPE, 'foo'); $sp8ec2ac->expect(Twig_Token::INTERPOLATION_START_TYPE); $sp8ec2ac->expect(Twig_Token::NAME_TYPE, 'bar'); $sp8ec2ac->expect(Twig_Token::INTERPOLATION_END_TYPE); $sp8ec2ac->expect(Twig_Token::INTERPOLATION_END_TYPE); $sp8ec2ac->expect(Twig_Token::VAR_END_TYPE); } public function testStringWithNestedInterpolationsInBlock() { $spe32893 = '{% foo "bar #{ "foo#{bar}" }" %}'; $sped078a = new Twig_Lexer(new Twig_Environment()); $sp8ec2ac = $sped078a->tokenize($spe32893); $sp8ec2ac->expect(Twig_Token::BLOCK_START_TYPE); $sp8ec2ac->expect(Twig_Token::NAME_TYPE, 'foo'); $sp8ec2ac->expect(Twig_Token::STRING_TYPE, 'bar '); $sp8ec2ac->expect(Twig_Token::INTERPOLATION_START_TYPE); $sp8ec2ac->expect(Twig_Token::STRING_TYPE, 'foo'); $sp8ec2ac->expect(Twig_Token::INTERPOLATION_START_TYPE); $sp8ec2ac->expect(Twig_Token::NAME_TYPE, 'bar'); $sp8ec2ac->expect(Twig_Token::INTERPOLATION_END_TYPE); $sp8ec2ac->expect(Twig_Token::INTERPOLATION_END_TYPE); $sp8ec2ac->expect(Twig_Token::BLOCK_END_TYPE); } public function testOperatorEndingWithALetterAtTheEndOfALine() { $spe32893 = '{{ 1 and
0}}'; $sped078a = new Twig_Lexer(new Twig_Environment()); $sp8ec2ac = $sped078a->tokenize($spe32893); $sp8ec2ac->expect(Twig_Token::VAR_START_TYPE); $sp8ec2ac->expect(Twig_Token::NUMBER_TYPE, 1); $sp8ec2ac->expect(Twig_Token::OPERATOR_TYPE, 'and'); } public function testUnterminatedVariable() { $spe32893 = '

{{

bar


'; $sped078a = new Twig_Lexer(new Twig_Environment()); $sped078a->tokenize($spe32893); } public function testUnterminatedBlock() { $spe32893 = '

{%

bar


'; $sped078a = new Twig_Lexer(new Twig_Environment()); $sped078a->tokenize($spe32893); } }