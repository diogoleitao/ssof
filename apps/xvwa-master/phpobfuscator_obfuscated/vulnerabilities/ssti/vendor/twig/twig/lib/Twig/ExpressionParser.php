<?php
class Twig_ExpressionParser { const OPERATOR_LEFT = 1; const OPERATOR_RIGHT = 2; protected $parser; protected $unaryOperators; protected $binaryOperators; public function __construct(Twig_Parser $sp284ef6, array $sp67c5c7, array $sp640249) { $this->parser = $sp284ef6; $this->unaryOperators = $sp67c5c7; $this->binaryOperators = $sp640249; } public function parseExpression($sp697f27 = 0) { $sp005e3e = $this->getPrimary(); $sp650e38 = $this->parser->getCurrentToken(); while ($this->isBinary($sp650e38) && $this->binaryOperators[$sp650e38->getValue()]['precedence'] >= $sp697f27) { $spd5f50d = $this->binaryOperators[$sp650e38->getValue()]; $this->parser->getStream()->next(); if (isset($spd5f50d['callable'])) { $sp005e3e = call_user_func($spd5f50d['callable'], $this->parser, $sp005e3e); } else { $sp01608e = $this->parseExpression(self::OPERATOR_LEFT === $spd5f50d['associativity'] ? $spd5f50d['precedence'] + 1 : $spd5f50d['precedence']); $spbd0159 = $spd5f50d['class']; $sp005e3e = new $spbd0159($sp005e3e, $sp01608e, $sp650e38->getLine()); } $sp650e38 = $this->parser->getCurrentToken(); } if (0 === $sp697f27) { return $this->parseConditionalExpression($sp005e3e); } return $sp005e3e; } protected function getPrimary() { $sp650e38 = $this->parser->getCurrentToken(); if ($this->isUnary($sp650e38)) { $sp2e0d44 = $this->unaryOperators[$sp650e38->getValue()]; $this->parser->getStream()->next(); $sp005e3e = $this->parseExpression($sp2e0d44['precedence']); $spbd0159 = $sp2e0d44['class']; return $this->parsePostfixExpression(new $spbd0159($sp005e3e, $sp650e38->getLine())); } elseif ($sp650e38->test(Twig_Token::PUNCTUATION_TYPE, '(')) { $this->parser->getStream()->next(); $sp005e3e = $this->parseExpression(); $this->parser->getStream()->expect(Twig_Token::PUNCTUATION_TYPE, ')', 'An opened parenthesis is not properly closed'); return $this->parsePostfixExpression($sp005e3e); } return $this->parsePrimaryExpression(); } protected function parseConditionalExpression($sp005e3e) { while ($this->parser->getStream()->nextIf(Twig_Token::PUNCTUATION_TYPE, '?')) { if (!$this->parser->getStream()->nextIf(Twig_Token::PUNCTUATION_TYPE, ':')) { $spe3703d = $this->parseExpression(); if ($this->parser->getStream()->nextIf(Twig_Token::PUNCTUATION_TYPE, ':')) { $spf2a2ea = $this->parseExpression(); } else { $spf2a2ea = new Twig_Node_Expression_Constant('', $this->parser->getCurrentToken()->getLine()); } } else { $spe3703d = $sp005e3e; $spf2a2ea = $this->parseExpression(); } $sp005e3e = new Twig_Node_Expression_Conditional($sp005e3e, $spe3703d, $spf2a2ea, $this->parser->getCurrentToken()->getLine()); } return $sp005e3e; } protected function isUnary(Twig_Token $sp650e38) { return $sp650e38->test(Twig_Token::OPERATOR_TYPE) && isset($this->unaryOperators[$sp650e38->getValue()]); } protected function isBinary(Twig_Token $sp650e38) { return $sp650e38->test(Twig_Token::OPERATOR_TYPE) && isset($this->binaryOperators[$sp650e38->getValue()]); } public function parsePrimaryExpression() { $sp650e38 = $this->parser->getCurrentToken(); switch ($sp650e38->getType()) { case Twig_Token::NAME_TYPE: $this->parser->getStream()->next(); switch ($sp650e38->getValue()) { case 'true': case 'TRUE': $spcefb62 = new Twig_Node_Expression_Constant(true, $sp650e38->getLine()); break; case 'false': case 'FALSE': $spcefb62 = new Twig_Node_Expression_Constant(false, $sp650e38->getLine()); break; case 'none': case 'NONE': case 'null': case 'NULL': $spcefb62 = new Twig_Node_Expression_Constant(null, $sp650e38->getLine()); break; default: if ('(' === $this->parser->getCurrentToken()->getValue()) { $spcefb62 = $this->getFunctionNode($sp650e38->getValue(), $sp650e38->getLine()); } else { $spcefb62 = new Twig_Node_Expression_Name($sp650e38->getValue(), $sp650e38->getLine()); } } break; case Twig_Token::NUMBER_TYPE: $this->parser->getStream()->next(); $spcefb62 = new Twig_Node_Expression_Constant($sp650e38->getValue(), $sp650e38->getLine()); break; case Twig_Token::STRING_TYPE: case Twig_Token::INTERPOLATION_START_TYPE: $spcefb62 = $this->parseStringExpression(); break; case Twig_Token::OPERATOR_TYPE: if (preg_match(Twig_Lexer::REGEX_NAME, $sp650e38->getValue(), $sp0b25b7) && $sp0b25b7[0] == $sp650e38->getValue()) { $this->parser->getStream()->next(); $spcefb62 = new Twig_Node_Expression_Name($sp650e38->getValue(), $sp650e38->getLine()); break; } elseif (isset($this->unaryOperators[$sp650e38->getValue()])) { $spbd0159 = $this->unaryOperators[$sp650e38->getValue()]['class']; $spb59924 = new ReflectionClass($spbd0159); $sp8046d1 = 'Twig_Node_Expression_Unary_Neg'; $sp881aaf = 'Twig_Node_Expression_Unary_Pos'; if (!(in_array($spb59924->getName(), array($sp8046d1, $sp881aaf)) || $spb59924->isSubclassOf($sp8046d1) || $spb59924->isSubclassOf($sp881aaf))) { throw new Twig_Error_Syntax(sprintf('Unexpected unary operator "%s"', $sp650e38->getValue()), $sp650e38->getLine(), $this->parser->getFilename()); } $this->parser->getStream()->next(); $sp005e3e = $this->parsePrimaryExpression(); $spcefb62 = new $spbd0159($sp005e3e, $sp650e38->getLine()); break; } default: if ($sp650e38->test(Twig_Token::PUNCTUATION_TYPE, '[')) { $spcefb62 = $this->parseArrayExpression(); } elseif ($sp650e38->test(Twig_Token::PUNCTUATION_TYPE, '{')) { $spcefb62 = $this->parseHashExpression(); } else { throw new Twig_Error_Syntax(sprintf('Unexpected token "%s" of value "%s"', Twig_Token::typeToEnglish($sp650e38->getType()), $sp650e38->getValue()), $sp650e38->getLine(), $this->parser->getFilename()); } } return $this->parsePostfixExpression($spcefb62); } public function parseStringExpression() { $sp8ec2ac = $this->parser->getStream(); $sp6619de = array(); $spbb5ae0 = true; while (true) { if ($spbb5ae0 && ($sp650e38 = $sp8ec2ac->nextIf(Twig_Token::STRING_TYPE))) { $sp6619de[] = new Twig_Node_Expression_Constant($sp650e38->getValue(), $sp650e38->getLine()); $spbb5ae0 = false; } elseif ($sp8ec2ac->nextIf(Twig_Token::INTERPOLATION_START_TYPE)) { $sp6619de[] = $this->parseExpression(); $sp8ec2ac->expect(Twig_Token::INTERPOLATION_END_TYPE); $spbb5ae0 = true; } else { break; } } $sp005e3e = array_shift($sp6619de); foreach ($sp6619de as $spcefb62) { $sp005e3e = new Twig_Node_Expression_Binary_Concat($sp005e3e, $spcefb62, $spcefb62->getLine()); } return $sp005e3e; } public function parseArrayExpression() { $sp8ec2ac = $this->parser->getStream(); $sp8ec2ac->expect(Twig_Token::PUNCTUATION_TYPE, '[', 'An array element was expected'); $spcefb62 = new Twig_Node_Expression_Array(array(), $sp8ec2ac->getCurrent()->getLine()); $sp94ea74 = true; while (!$sp8ec2ac->test(Twig_Token::PUNCTUATION_TYPE, ']')) { if (!$sp94ea74) { $sp8ec2ac->expect(Twig_Token::PUNCTUATION_TYPE, ',', 'An array element must be followed by a comma'); if ($sp8ec2ac->test(Twig_Token::PUNCTUATION_TYPE, ']')) { break; } } $sp94ea74 = false; $spcefb62->addElement($this->parseExpression()); } $sp8ec2ac->expect(Twig_Token::PUNCTUATION_TYPE, ']', 'An opened array is not properly closed'); return $spcefb62; } public function parseHashExpression() { $sp8ec2ac = $this->parser->getStream(); $sp8ec2ac->expect(Twig_Token::PUNCTUATION_TYPE, '{', 'A hash element was expected'); $spcefb62 = new Twig_Node_Expression_Array(array(), $sp8ec2ac->getCurrent()->getLine()); $sp94ea74 = true; while (!$sp8ec2ac->test(Twig_Token::PUNCTUATION_TYPE, '}')) { if (!$sp94ea74) { $sp8ec2ac->expect(Twig_Token::PUNCTUATION_TYPE, ',', 'A hash value must be followed by a comma'); if ($sp8ec2ac->test(Twig_Token::PUNCTUATION_TYPE, '}')) { break; } } $sp94ea74 = false; if (($sp650e38 = $sp8ec2ac->nextIf(Twig_Token::STRING_TYPE)) || ($sp650e38 = $sp8ec2ac->nextIf(Twig_Token::NAME_TYPE)) || ($sp650e38 = $sp8ec2ac->nextIf(Twig_Token::NUMBER_TYPE))) { $spd888fc = new Twig_Node_Expression_Constant($sp650e38->getValue(), $sp650e38->getLine()); } elseif ($sp8ec2ac->test(Twig_Token::PUNCTUATION_TYPE, '(')) { $spd888fc = $this->parseExpression(); } else { $spffe8f5 = $sp8ec2ac->getCurrent(); throw new Twig_Error_Syntax(sprintf('A hash key must be a quoted string, a number, a name, or an expression enclosed in parentheses (unexpected token "%s" of value "%s"', Twig_Token::typeToEnglish($spffe8f5->getType()), $spffe8f5->getValue()), $spffe8f5->getLine(), $this->parser->getFilename()); } $sp8ec2ac->expect(Twig_Token::PUNCTUATION_TYPE, ':', 'A hash key must be followed by a colon (:)'); $spbb4d96 = $this->parseExpression(); $spcefb62->addElement($spbb4d96, $spd888fc); } $sp8ec2ac->expect(Twig_Token::PUNCTUATION_TYPE, '}', 'An opened hash is not properly closed'); return $spcefb62; } public function parsePostfixExpression($spcefb62) { while (true) { $sp650e38 = $this->parser->getCurrentToken(); if ($sp650e38->getType() == Twig_Token::PUNCTUATION_TYPE) { if ('.' == $sp650e38->getValue() || '[' == $sp650e38->getValue()) { $spcefb62 = $this->parseSubscriptExpression($spcefb62); } elseif ('|' == $sp650e38->getValue()) { $spcefb62 = $this->parseFilterExpression($spcefb62); } else { break; } } else { break; } } return $spcefb62; } public function getFunctionNode($sp3eec35, $sp1a6fde) { switch ($sp3eec35) { case 'parent': $this->parseArguments(); if (!count($this->parser->getBlockStack())) { throw new Twig_Error_Syntax('Calling "parent" outside a block is forbidden', $sp1a6fde, $this->parser->getFilename()); } if (!$this->parser->getParent() && !$this->parser->hasTraits()) { throw new Twig_Error_Syntax('Calling "parent" on a template that does not extend nor "use" another template is forbidden', $sp1a6fde, $this->parser->getFilename()); } return new Twig_Node_Expression_Parent($this->parser->peekBlockStack(), $sp1a6fde); case 'block': return new Twig_Node_Expression_BlockReference($this->parseArguments()->getNode(0), false, $sp1a6fde); case 'attribute': $spbd325e = $this->parseArguments(); if (count($spbd325e) < 2) { throw new Twig_Error_Syntax('The "attribute" function takes at least two arguments (the variable and the attributes)', $sp1a6fde, $this->parser->getFilename()); } return new Twig_Node_Expression_GetAttr($spbd325e->getNode(0), $spbd325e->getNode(1), count($spbd325e) > 2 ? $spbd325e->getNode(2) : null, Twig_Template::ANY_CALL, $sp1a6fde); default: if (null !== ($sp752449 = $this->parser->getImportedSymbol('function', $sp3eec35))) { $spc5cc06 = new Twig_Node_Expression_Array(array(), $sp1a6fde); foreach ($this->parseArguments() as $sp96b41e) { $spc5cc06->addElement($sp96b41e); } $spcefb62 = new Twig_Node_Expression_MethodCall($sp752449['node'], $sp752449['name'], $spc5cc06, $sp1a6fde); $spcefb62->setAttribute('safe', true); return $spcefb62; } $spbd325e = $this->parseArguments(true); $spbd0159 = $this->getFunctionNodeClass($sp3eec35, $sp1a6fde); return new $spbd0159($sp3eec35, $spbd325e, $sp1a6fde); } } public function parseSubscriptExpression($spcefb62) { $sp8ec2ac = $this->parser->getStream(); $sp650e38 = $sp8ec2ac->next(); $sp1f599c = $sp650e38->getLine(); $spc5cc06 = new Twig_Node_Expression_Array(array(), $sp1f599c); $sp32ff7e = Twig_Template::ANY_CALL; if ($sp650e38->getValue() == '.') { $sp650e38 = $sp8ec2ac->next(); if ($sp650e38->getType() == Twig_Token::NAME_TYPE || $sp650e38->getType() == Twig_Token::NUMBER_TYPE || $sp650e38->getType() == Twig_Token::OPERATOR_TYPE && preg_match(Twig_Lexer::REGEX_NAME, $sp650e38->getValue())) { $sp5ebab3 = new Twig_Node_Expression_Constant($sp650e38->getValue(), $sp1f599c); if ($sp8ec2ac->test(Twig_Token::PUNCTUATION_TYPE, '(')) { $sp32ff7e = Twig_TemplateInterface::METHOD_CALL; foreach ($this->parseArguments() as $sp96b41e) { $spc5cc06->addElement($sp96b41e); } } } else { throw new Twig_Error_Syntax('Expected name or number', $sp1f599c, $this->parser->getFilename()); } if ($spcefb62 instanceof Twig_Node_Expression_Name && null !== $this->parser->getImportedSymbol('template', $spcefb62->getAttribute('name'))) { if (!$sp5ebab3 instanceof Twig_Node_Expression_Constant) { throw new Twig_Error_Syntax(sprintf('Dynamic macro names are not supported (called on "%s")', $spcefb62->getAttribute('name')), $sp650e38->getLine(), $this->parser->getFilename()); } $spcefb62 = new Twig_Node_Expression_MethodCall($spcefb62, 'get' . $sp5ebab3->getAttribute('value'), $spc5cc06, $sp1f599c); $spcefb62->setAttribute('safe', true); return $spcefb62; } } else { $sp32ff7e = Twig_Template::ARRAY_CALL; $sp679079 = false; if ($sp8ec2ac->test(Twig_Token::PUNCTUATION_TYPE, ':')) { $sp679079 = true; $sp5ebab3 = new Twig_Node_Expression_Constant(0, $sp650e38->getLine()); } else { $sp5ebab3 = $this->parseExpression(); } if ($sp8ec2ac->nextIf(Twig_Token::PUNCTUATION_TYPE, ':')) { $sp679079 = true; } if ($sp679079) { if ($sp8ec2ac->test(Twig_Token::PUNCTUATION_TYPE, ']')) { $sp64e7f0 = new Twig_Node_Expression_Constant(null, $sp650e38->getLine()); } else { $sp64e7f0 = $this->parseExpression(); } $spbd0159 = $this->getFilterNodeClass('slice', $sp650e38->getLine()); $spc5cc06 = new Twig_Node(array($sp5ebab3, $sp64e7f0)); $sp4a901b = new $spbd0159($spcefb62, new Twig_Node_Expression_Constant('slice', $sp650e38->getLine()), $spc5cc06, $sp650e38->getLine()); $sp8ec2ac->expect(Twig_Token::PUNCTUATION_TYPE, ']'); return $sp4a901b; } $sp8ec2ac->expect(Twig_Token::PUNCTUATION_TYPE, ']'); } return new Twig_Node_Expression_GetAttr($spcefb62, $sp5ebab3, $spc5cc06, $sp32ff7e, $sp1f599c); } public function parseFilterExpression($spcefb62) { $this->parser->getStream()->next(); return $this->parseFilterExpressionRaw($spcefb62); } public function parseFilterExpressionRaw($spcefb62, $sp836199 = null) { while (true) { $sp650e38 = $this->parser->getStream()->expect(Twig_Token::NAME_TYPE); $sp3eec35 = new Twig_Node_Expression_Constant($sp650e38->getValue(), $sp650e38->getLine()); if (!$this->parser->getStream()->test(Twig_Token::PUNCTUATION_TYPE, '(')) { $spc5cc06 = new Twig_Node(); } else { $spc5cc06 = $this->parseArguments(true); } $spbd0159 = $this->getFilterNodeClass($sp3eec35->getAttribute('value'), $sp650e38->getLine()); $spcefb62 = new $spbd0159($spcefb62, $sp3eec35, $spc5cc06, $sp650e38->getLine(), $sp836199); if (!$this->parser->getStream()->test(Twig_Token::PUNCTUATION_TYPE, '|')) { break; } $this->parser->getStream()->next(); } return $spcefb62; } public function parseArguments($sp5b0619 = false, $spb50136 = false) { $spbd325e = array(); $sp8ec2ac = $this->parser->getStream(); $sp8ec2ac->expect(Twig_Token::PUNCTUATION_TYPE, '(', 'A list of arguments must begin with an opening parenthesis'); while (!$sp8ec2ac->test(Twig_Token::PUNCTUATION_TYPE, ')')) { if (!empty($spbd325e)) { $sp8ec2ac->expect(Twig_Token::PUNCTUATION_TYPE, ',', 'Arguments must be separated by a comma'); } if ($spb50136) { $sp650e38 = $sp8ec2ac->expect(Twig_Token::NAME_TYPE, null, 'An argument must be a name'); $spbb4d96 = new Twig_Node_Expression_Name($sp650e38->getValue(), $this->parser->getCurrentToken()->getLine()); } else { $spbb4d96 = $this->parseExpression(); } $sp3eec35 = null; if ($sp5b0619 && ($sp650e38 = $sp8ec2ac->nextIf(Twig_Token::OPERATOR_TYPE, '='))) { if (!$spbb4d96 instanceof Twig_Node_Expression_Name) { throw new Twig_Error_Syntax(sprintf('A parameter name must be a string, "%s" given', get_class($spbb4d96)), $sp650e38->getLine(), $this->parser->getFilename()); } $sp3eec35 = $spbb4d96->getAttribute('name'); if ($spb50136) { $spbb4d96 = $this->parsePrimaryExpression(); if (!$this->checkConstantExpression($spbb4d96)) { throw new Twig_Error_Syntax(sprintf('A default value for an argument must be a constant (a boolean, a string, a number, or an array).'), $sp650e38->getLine(), $this->parser->getFilename()); } } else { $spbb4d96 = $this->parseExpression(); } } if ($spb50136) { if (null === $sp3eec35) { $sp3eec35 = $spbb4d96->getAttribute('name'); $spbb4d96 = new Twig_Node_Expression_Constant(null, $this->parser->getCurrentToken()->getLine()); } $spbd325e[$sp3eec35] = $spbb4d96; } else { if (null === $sp3eec35) { $spbd325e[] = $spbb4d96; } else { $spbd325e[$sp3eec35] = $spbb4d96; } } } $sp8ec2ac->expect(Twig_Token::PUNCTUATION_TYPE, ')', 'A list of arguments must be closed by a parenthesis'); return new Twig_Node($spbd325e); } public function parseAssignmentExpression() { $spd8f1e3 = array(); while (true) { $sp650e38 = $this->parser->getStream()->expect(Twig_Token::NAME_TYPE, null, 'Only variables can be assigned to'); if (in_array($sp650e38->getValue(), array('true', 'false', 'none'))) { throw new Twig_Error_Syntax(sprintf('You cannot assign a value to "%s"', $sp650e38->getValue()), $sp650e38->getLine(), $this->parser->getFilename()); } $spd8f1e3[] = new Twig_Node_Expression_AssignName($sp650e38->getValue(), $sp650e38->getLine()); if (!$this->parser->getStream()->nextIf(Twig_Token::PUNCTUATION_TYPE, ',')) { break; } } return new Twig_Node($spd8f1e3); } public function parseMultitargetExpression() { $spd8f1e3 = array(); while (true) { $spd8f1e3[] = $this->parseExpression(); if (!$this->parser->getStream()->nextIf(Twig_Token::PUNCTUATION_TYPE, ',')) { break; } } return new Twig_Node($spd8f1e3); } protected function getFunctionNodeClass($sp3eec35, $sp1a6fde) { $spf4b92b = $this->parser->getEnvironment(); if (false === ($sp9b51b9 = $spf4b92b->getFunction($sp3eec35))) { $sp9f2d02 = sprintf('The function "%s" does not exist', $sp3eec35); if ($sp249a0e = $spf4b92b->computeAlternatives($sp3eec35, array_keys($spf4b92b->getFunctions()))) { $sp9f2d02 = sprintf('%s. Did you mean "%s"', $sp9f2d02, implode('", "', $sp249a0e)); } throw new Twig_Error_Syntax($sp9f2d02, $sp1a6fde, $this->parser->getFilename()); } if ($sp9b51b9 instanceof Twig_SimpleFunction) { return $sp9b51b9->getNodeClass(); } return $sp9b51b9 instanceof Twig_Function_Node ? $sp9b51b9->getClass() : 'Twig_Node_Expression_Function'; } protected function getFilterNodeClass($sp3eec35, $sp1a6fde) { $spf4b92b = $this->parser->getEnvironment(); if (false === ($sp4a901b = $spf4b92b->getFilter($sp3eec35))) { $sp9f2d02 = sprintf('The filter "%s" does not exist', $sp3eec35); if ($sp249a0e = $spf4b92b->computeAlternatives($sp3eec35, array_keys($spf4b92b->getFilters()))) { $sp9f2d02 = sprintf('%s. Did you mean "%s"', $sp9f2d02, implode('", "', $sp249a0e)); } throw new Twig_Error_Syntax($sp9f2d02, $sp1a6fde, $this->parser->getFilename()); } if ($sp4a901b instanceof Twig_SimpleFilter) { return $sp4a901b->getNodeClass(); } return $sp4a901b instanceof Twig_Filter_Node ? $sp4a901b->getClass() : 'Twig_Node_Expression_Filter'; } protected function checkConstantExpression(Twig_NodeInterface $spcefb62) { if (!($spcefb62 instanceof Twig_Node_Expression_Constant || $spcefb62 instanceof Twig_Node_Expression_Array || $spcefb62 instanceof Twig_Node_Expression_Unary_Neg || $spcefb62 instanceof Twig_Node_Expression_Unary_Pos)) { return false; } foreach ($spcefb62 as $sp96b41e) { if (!$this->checkConstantExpression($sp96b41e)) { return false; } } return true; } }