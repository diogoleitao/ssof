<?php
class Twig_Token { protected $value; protected $type; protected $lineno; const EOF_TYPE = -1; const TEXT_TYPE = 0; const BLOCK_START_TYPE = 1; const VAR_START_TYPE = 2; const BLOCK_END_TYPE = 3; const VAR_END_TYPE = 4; const NAME_TYPE = 5; const NUMBER_TYPE = 6; const STRING_TYPE = 7; const OPERATOR_TYPE = 8; const PUNCTUATION_TYPE = 9; const INTERPOLATION_START_TYPE = 10; const INTERPOLATION_END_TYPE = 11; public function __construct($sp32ff7e, $spbb4d96, $sp1f599c) { $this->type = $sp32ff7e; $this->value = $spbb4d96; $this->lineno = $sp1f599c; } public function __toString() { return sprintf('%s(%s)', self::typeToString($this->type, true), $this->value); } public function test($sp32ff7e, $sp14b89a = null) { if (null === $sp14b89a && !is_int($sp32ff7e)) { $sp14b89a = $sp32ff7e; $sp32ff7e = self::NAME_TYPE; } return $this->type === $sp32ff7e && (null === $sp14b89a || is_array($sp14b89a) && in_array($this->value, $sp14b89a) || $this->value == $sp14b89a); } public function getLine() { return $this->lineno; } public function getType() { return $this->type; } public function getValue() { return $this->value; } public static function typeToString($sp32ff7e, $sp9d58c7 = false) { switch ($sp32ff7e) { case self::EOF_TYPE: $sp3eec35 = 'EOF_TYPE'; break; case self::TEXT_TYPE: $sp3eec35 = 'TEXT_TYPE'; break; case self::BLOCK_START_TYPE: $sp3eec35 = 'BLOCK_START_TYPE'; break; case self::VAR_START_TYPE: $sp3eec35 = 'VAR_START_TYPE'; break; case self::BLOCK_END_TYPE: $sp3eec35 = 'BLOCK_END_TYPE'; break; case self::VAR_END_TYPE: $sp3eec35 = 'VAR_END_TYPE'; break; case self::NAME_TYPE: $sp3eec35 = 'NAME_TYPE'; break; case self::NUMBER_TYPE: $sp3eec35 = 'NUMBER_TYPE'; break; case self::STRING_TYPE: $sp3eec35 = 'STRING_TYPE'; break; case self::OPERATOR_TYPE: $sp3eec35 = 'OPERATOR_TYPE'; break; case self::PUNCTUATION_TYPE: $sp3eec35 = 'PUNCTUATION_TYPE'; break; case self::INTERPOLATION_START_TYPE: $sp3eec35 = 'INTERPOLATION_START_TYPE'; break; case self::INTERPOLATION_END_TYPE: $sp3eec35 = 'INTERPOLATION_END_TYPE'; break; default: throw new LogicException(sprintf('Token of type "%s" does not exist.', $sp32ff7e)); } return $sp9d58c7 ? $sp3eec35 : 'Twig_Token::' . $sp3eec35; } public static function typeToEnglish($sp32ff7e) { switch ($sp32ff7e) { case self::EOF_TYPE: return 'end of template'; case self::TEXT_TYPE: return 'text'; case self::BLOCK_START_TYPE: return 'begin of statement block'; case self::VAR_START_TYPE: return 'begin of print statement'; case self::BLOCK_END_TYPE: return 'end of statement block'; case self::VAR_END_TYPE: return 'end of print statement'; case self::NAME_TYPE: return 'name'; case self::NUMBER_TYPE: return 'number'; case self::STRING_TYPE: return 'string'; case self::OPERATOR_TYPE: return 'operator'; case self::PUNCTUATION_TYPE: return 'punctuation'; case self::INTERPOLATION_START_TYPE: return 'begin of string interpolation'; case self::INTERPOLATION_END_TYPE: return 'end of string interpolation'; default: throw new LogicException(sprintf('Token of type "%s" does not exist.', $sp32ff7e)); } } }