<?php
class Twig_TokenParser_Use extends Twig_TokenParser { public function parse(Twig_Token $sp650e38) { $spe32893 = $this->parser->getExpressionParser()->parseExpression(); $sp8ec2ac = $this->parser->getStream(); if (!$spe32893 instanceof Twig_Node_Expression_Constant) { throw new Twig_Error_Syntax('The template references in a "use" statement must be a string.', $sp8ec2ac->getCurrent()->getLine(), $sp8ec2ac->getFilename()); } $spd8f1e3 = array(); if ($sp8ec2ac->nextIf('with')) { do { $sp3eec35 = $sp8ec2ac->expect(Twig_Token::NAME_TYPE)->getValue(); $sp752449 = $sp3eec35; if ($sp8ec2ac->nextIf('as')) { $sp752449 = $sp8ec2ac->expect(Twig_Token::NAME_TYPE)->getValue(); } $spd8f1e3[$sp3eec35] = new Twig_Node_Expression_Constant($sp752449, -1); if (!$sp8ec2ac->nextIf(Twig_Token::PUNCTUATION_TYPE, ',')) { break; } } while (true); } $sp8ec2ac->expect(Twig_Token::BLOCK_END_TYPE); $this->parser->addTrait(new Twig_Node(array('template' => $spe32893, 'targets' => new Twig_Node($spd8f1e3)))); } public function getTag() { return 'use'; } }