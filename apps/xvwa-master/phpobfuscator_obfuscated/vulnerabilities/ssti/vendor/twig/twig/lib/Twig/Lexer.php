<?php
class Twig_Lexer implements Twig_LexerInterface { protected $tokens; protected $code; protected $cursor; protected $lineno; protected $end; protected $state; protected $states; protected $brackets; protected $env; protected $filename; protected $options; protected $regexes; protected $position; protected $positions; protected $currentVarBlockLine; const STATE_DATA = 0; const STATE_BLOCK = 1; const STATE_VAR = 2; const STATE_STRING = 3; const STATE_INTERPOLATION = 4; const REGEX_NAME = '/[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*/A'; const REGEX_NUMBER = '/[0-9]+(?:\\.[0-9]+)?/A'; const REGEX_STRING = '/"([^#"\\\\]*(?:\\\\.[^#"\\\\]*)*)"|\'([^\'\\\\]*(?:\\\\.[^\'\\\\]*)*)\'/As'; const REGEX_DQ_STRING_DELIM = '/"/A'; const REGEX_DQ_STRING_PART = '/[^#"\\\\]*(?:(?:\\\\.|#(?!\\{))[^#"\\\\]*)*/As'; const PUNCTUATION = '()[]{}?:.,|'; public function __construct(Twig_Environment $spf4b92b, array $sp44f03d = array()) { $this->env = $spf4b92b; $this->options = array_merge(array('tag_comment' => array('{#', '#}'), 'tag_block' => array('{%', '%}'), 'tag_variable' => array('{{', '}}'), 'whitespace_trim' => '-', 'interpolation' => array('#{', '}')), $sp44f03d); $this->regexes = array('lex_var' => '/\\s*' . preg_quote($this->options['whitespace_trim'] . $this->options['tag_variable'][1], '/') . '\\s*|\\s*' . preg_quote($this->options['tag_variable'][1], '/') . '/A', 'lex_block' => '/\\s*(?:' . preg_quote($this->options['whitespace_trim'] . $this->options['tag_block'][1], '/') . '\\s*|\\s*' . preg_quote($this->options['tag_block'][1], '/') . ')\\n?/A', 'lex_raw_data' => '/(' . preg_quote($this->options['tag_block'][0] . $this->options['whitespace_trim'], '/') . '|' . preg_quote($this->options['tag_block'][0], '/') . ')\\s*(?:end%s)\\s*(?:' . preg_quote($this->options['whitespace_trim'] . $this->options['tag_block'][1], '/') . '\\s*|\\s*' . preg_quote($this->options['tag_block'][1], '/') . ')/s', 'operator' => $this->getOperatorRegex(), 'lex_comment' => '/(?:' . preg_quote($this->options['whitespace_trim'], '/') . preg_quote($this->options['tag_comment'][1], '/') . '\\s*|' . preg_quote($this->options['tag_comment'][1], '/') . ')\\n?/s', 'lex_block_raw' => '/\\s*(raw|verbatim)\\s*(?:' . preg_quote($this->options['whitespace_trim'] . $this->options['tag_block'][1], '/') . '\\s*|\\s*' . preg_quote($this->options['tag_block'][1], '/') . ')/As', 'lex_block_line' => '/\\s*line\\s+(\\d+)\\s*' . preg_quote($this->options['tag_block'][1], '/') . '/As', 'lex_tokens_start' => '/(' . preg_quote($this->options['tag_variable'][0], '/') . '|' . preg_quote($this->options['tag_block'][0], '/') . '|' . preg_quote($this->options['tag_comment'][0], '/') . ')(' . preg_quote($this->options['whitespace_trim'], '/') . ')?/s', 'interpolation_start' => '/' . preg_quote($this->options['interpolation'][0], '/') . '\\s*/A', 'interpolation_end' => '/\\s*' . preg_quote($this->options['interpolation'][1], '/') . '/A'); } public function tokenize($sp71dfd7, $sp79b407 = null) { if (function_exists('mb_internal_encoding') && (int) ini_get('mbstring.func_overload') & 2) { $sp4bbed3 = mb_internal_encoding(); mb_internal_encoding('ASCII'); } else { $sp4bbed3 = null; } $this->code = str_replace(array('
', ''), '
', $sp71dfd7); $this->filename = $sp79b407; $this->cursor = 0; $this->lineno = 1; $this->end = strlen($this->code); $this->tokens = array(); $this->state = self::STATE_DATA; $this->states = array(); $this->brackets = array(); $this->position = -1; preg_match_all($this->regexes['lex_tokens_start'], $this->code, $sp0b25b7, PREG_OFFSET_CAPTURE); $this->positions = $sp0b25b7; while ($this->cursor < $this->end) { switch ($this->state) { case self::STATE_DATA: $this->lexData(); break; case self::STATE_BLOCK: $this->lexBlock(); break; case self::STATE_VAR: $this->lexVar(); break; case self::STATE_STRING: $this->lexString(); break; case self::STATE_INTERPOLATION: $this->lexInterpolation(); break; } } $this->pushToken(Twig_Token::EOF_TYPE); if (!empty($this->brackets)) { list($sp37a9f8, $sp1f599c) = array_pop($this->brackets); throw new Twig_Error_Syntax(sprintf('Unclosed "%s"', $sp37a9f8), $sp1f599c, $this->filename); } if ($sp4bbed3) { mb_internal_encoding($sp4bbed3); } return new Twig_TokenStream($this->tokens, $this->filename); } protected function lexData() { if ($this->position == count($this->positions[0]) - 1) { $this->pushToken(Twig_Token::TEXT_TYPE, substr($this->code, $this->cursor)); $this->cursor = $this->end; return; } $sp1c15b8 = $this->positions[0][++$this->position]; while ($sp1c15b8[1] < $this->cursor) { if ($this->position == count($this->positions[0]) - 1) { return; } $sp1c15b8 = $this->positions[0][++$this->position]; } $sp486ecf = $sp4a4a4a = substr($this->code, $this->cursor, $sp1c15b8[1] - $this->cursor); if (isset($this->positions[2][$this->position][0])) { $sp486ecf = rtrim($sp486ecf); } $this->pushToken(Twig_Token::TEXT_TYPE, $sp486ecf); $this->moveCursor($sp4a4a4a . $sp1c15b8[0]); switch ($this->positions[1][$this->position][0]) { case $this->options['tag_comment'][0]: $this->lexComment(); break; case $this->options['tag_block'][0]: if (preg_match($this->regexes['lex_block_raw'], $this->code, $sp3832c1, null, $this->cursor)) { $this->moveCursor($sp3832c1[0]); $this->lexRawData($sp3832c1[1]); } elseif (preg_match($this->regexes['lex_block_line'], $this->code, $sp3832c1, null, $this->cursor)) { $this->moveCursor($sp3832c1[0]); $this->lineno = (int) $sp3832c1[1]; } else { $this->pushToken(Twig_Token::BLOCK_START_TYPE); $this->pushState(self::STATE_BLOCK); $this->currentVarBlockLine = $this->lineno; } break; case $this->options['tag_variable'][0]: $this->pushToken(Twig_Token::VAR_START_TYPE); $this->pushState(self::STATE_VAR); $this->currentVarBlockLine = $this->lineno; break; } } protected function lexBlock() { if (empty($this->brackets) && preg_match($this->regexes['lex_block'], $this->code, $sp3832c1, null, $this->cursor)) { $this->pushToken(Twig_Token::BLOCK_END_TYPE); $this->moveCursor($sp3832c1[0]); $this->popState(); } else { $this->lexExpression(); } } protected function lexVar() { if (empty($this->brackets) && preg_match($this->regexes['lex_var'], $this->code, $sp3832c1, null, $this->cursor)) { $this->pushToken(Twig_Token::VAR_END_TYPE); $this->moveCursor($sp3832c1[0]); $this->popState(); } else { $this->lexExpression(); } } protected function lexExpression() { if (preg_match('/\\s+/A', $this->code, $sp3832c1, null, $this->cursor)) { $this->moveCursor($sp3832c1[0]); if ($this->cursor >= $this->end) { throw new Twig_Error_Syntax(sprintf('Unclosed "%s"', $this->state === self::STATE_BLOCK ? 'block' : 'variable'), $this->currentVarBlockLine, $this->filename); } } if (preg_match($this->regexes['operator'], $this->code, $sp3832c1, null, $this->cursor)) { $this->pushToken(Twig_Token::OPERATOR_TYPE, preg_replace('/\\s+/', ' ', $sp3832c1[0])); $this->moveCursor($sp3832c1[0]); } elseif (preg_match(self::REGEX_NAME, $this->code, $sp3832c1, null, $this->cursor)) { $this->pushToken(Twig_Token::NAME_TYPE, $sp3832c1[0]); $this->moveCursor($sp3832c1[0]); } elseif (preg_match(self::REGEX_NUMBER, $this->code, $sp3832c1, null, $this->cursor)) { $sp7cdeab = (double) $sp3832c1[0]; if (ctype_digit($sp3832c1[0]) && $sp7cdeab <= PHP_INT_MAX) { $sp7cdeab = (int) $sp3832c1[0]; } $this->pushToken(Twig_Token::NUMBER_TYPE, $sp7cdeab); $this->moveCursor($sp3832c1[0]); } elseif (false !== strpos(self::PUNCTUATION, $this->code[$this->cursor])) { if (false !== strpos('([{', $this->code[$this->cursor])) { $this->brackets[] = array($this->code[$this->cursor], $this->lineno); } elseif (false !== strpos(')]}', $this->code[$this->cursor])) { if (empty($this->brackets)) { throw new Twig_Error_Syntax(sprintf('Unexpected "%s"', $this->code[$this->cursor]), $this->lineno, $this->filename); } list($sp37a9f8, $sp1f599c) = array_pop($this->brackets); if ($this->code[$this->cursor] != strtr($sp37a9f8, '([{', ')]}')) { throw new Twig_Error_Syntax(sprintf('Unclosed "%s"', $sp37a9f8), $sp1f599c, $this->filename); } } $this->pushToken(Twig_Token::PUNCTUATION_TYPE, $this->code[$this->cursor]); ++$this->cursor; } elseif (preg_match(self::REGEX_STRING, $this->code, $sp3832c1, null, $this->cursor)) { $this->pushToken(Twig_Token::STRING_TYPE, stripcslashes(substr($sp3832c1[0], 1, -1))); $this->moveCursor($sp3832c1[0]); } elseif (preg_match(self::REGEX_DQ_STRING_DELIM, $this->code, $sp3832c1, null, $this->cursor)) { $this->brackets[] = array('"', $this->lineno); $this->pushState(self::STATE_STRING); $this->moveCursor($sp3832c1[0]); } else { throw new Twig_Error_Syntax(sprintf('Unexpected character "%s"', $this->code[$this->cursor]), $this->lineno, $this->filename); } } protected function lexRawData($sp836199) { if (!preg_match(str_replace('%s', $sp836199, $this->regexes['lex_raw_data']), $this->code, $sp3832c1, PREG_OFFSET_CAPTURE, $this->cursor)) { throw new Twig_Error_Syntax(sprintf('Unexpected end of file: Unclosed "%s" block', $sp836199), $this->lineno, $this->filename); } $sp486ecf = substr($this->code, $this->cursor, $sp3832c1[0][1] - $this->cursor); $this->moveCursor($sp486ecf . $sp3832c1[0][0]); if (false !== strpos($sp3832c1[1][0], $this->options['whitespace_trim'])) { $sp486ecf = rtrim($sp486ecf); } $this->pushToken(Twig_Token::TEXT_TYPE, $sp486ecf); } protected function lexComment() { if (!preg_match($this->regexes['lex_comment'], $this->code, $sp3832c1, PREG_OFFSET_CAPTURE, $this->cursor)) { throw new Twig_Error_Syntax('Unclosed comment', $this->lineno, $this->filename); } $this->moveCursor(substr($this->code, $this->cursor, $sp3832c1[0][1] - $this->cursor) . $sp3832c1[0][0]); } protected function lexString() { if (preg_match($this->regexes['interpolation_start'], $this->code, $sp3832c1, null, $this->cursor)) { $this->brackets[] = array($this->options['interpolation'][0], $this->lineno); $this->pushToken(Twig_Token::INTERPOLATION_START_TYPE); $this->moveCursor($sp3832c1[0]); $this->pushState(self::STATE_INTERPOLATION); } elseif (preg_match(self::REGEX_DQ_STRING_PART, $this->code, $sp3832c1, null, $this->cursor) && strlen($sp3832c1[0]) > 0) { $this->pushToken(Twig_Token::STRING_TYPE, stripcslashes($sp3832c1[0])); $this->moveCursor($sp3832c1[0]); } elseif (preg_match(self::REGEX_DQ_STRING_DELIM, $this->code, $sp3832c1, null, $this->cursor)) { list($sp37a9f8, $sp1f599c) = array_pop($this->brackets); if ($this->code[$this->cursor] != '"') { throw new Twig_Error_Syntax(sprintf('Unclosed "%s"', $sp37a9f8), $sp1f599c, $this->filename); } $this->popState(); ++$this->cursor; } } protected function lexInterpolation() { $sp727335 = end($this->brackets); if ($this->options['interpolation'][0] === $sp727335[0] && preg_match($this->regexes['interpolation_end'], $this->code, $sp3832c1, null, $this->cursor)) { array_pop($this->brackets); $this->pushToken(Twig_Token::INTERPOLATION_END_TYPE); $this->moveCursor($sp3832c1[0]); $this->popState(); } else { $this->lexExpression(); } } protected function pushToken($sp32ff7e, $spbb4d96 = '') { if (Twig_Token::TEXT_TYPE === $sp32ff7e && '' === $spbb4d96) { return; } $this->tokens[] = new Twig_Token($sp32ff7e, $spbb4d96, $this->lineno); } protected function moveCursor($sp486ecf) { $this->cursor += strlen($sp486ecf); $this->lineno += substr_count($sp486ecf, '
'); } protected function getOperatorRegex() { $spcdc3b0 = array_merge(array('='), array_keys($this->env->getUnaryOperators()), array_keys($this->env->getBinaryOperators())); $spcdc3b0 = array_combine($spcdc3b0, array_map('strlen', $spcdc3b0)); arsort($spcdc3b0); $sp2f4c45 = array(); foreach ($spcdc3b0 as $sp2e0d44 => $sp64e7f0) { if (ctype_alpha($sp2e0d44[$sp64e7f0 - 1])) { $sp693624 = preg_quote($sp2e0d44, '/') . '(?=[\\s()])'; } else { $sp693624 = preg_quote($sp2e0d44, '/'); } $sp693624 = preg_replace('/\\s+/', '\\s+', $sp693624); $sp2f4c45[] = $sp693624; } return '/' . implode('|', $sp2f4c45) . '/A'; } protected function pushState($sp7b44f1) { $this->states[] = $this->state; $this->state = $sp7b44f1; } protected function popState() { if (0 === count($this->states)) { throw new Exception('Cannot pop state without a previous state'); } $this->state = array_pop($this->states); } }