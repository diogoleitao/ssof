<?php
class Twig_Node implements Twig_NodeInterface { protected $nodes; protected $attributes; protected $lineno; protected $tag; public function __construct(array $sp6619de = array(), array $spd1b539 = array(), $sp1f599c = 0, $sp836199 = null) { $this->nodes = $sp6619de; $this->attributes = $spd1b539; $this->lineno = $sp1f599c; $this->tag = $sp836199; } public function __toString() { $spd1b539 = array(); foreach ($this->attributes as $sp3eec35 => $spbb4d96) { $spd1b539[] = sprintf('%s: %s', $sp3eec35, str_replace('
', '', var_export($spbb4d96, true))); } $spb5c5e5 = array(get_class($this) . '(' . implode(', ', $spd1b539)); if (count($this->nodes)) { foreach ($this->nodes as $sp3eec35 => $spcefb62) { $sp2d7d5d = strlen($sp3eec35) + 4; $spcb601a = array(); foreach (explode('
', (string) $spcefb62) as $sp1a6fde) { $spcb601a[] = str_repeat(' ', $sp2d7d5d) . $sp1a6fde; } $spb5c5e5[] = sprintf('  %s: %s', $sp3eec35, ltrim(implode('
', $spcb601a))); } $spb5c5e5[] = ')'; } else { $spb5c5e5[0] .= ')'; } return implode('
', $spb5c5e5); } public function toXml($spe9c0cb = false) { $sp25cd3b = new DOMDocument('1.0', 'UTF-8'); $sp25cd3b->formatOutput = true; $sp25cd3b->appendChild($spef1109 = $sp25cd3b->createElement('twig')); $spef1109->appendChild($spcefb62 = $sp25cd3b->createElement('node')); $spcefb62->setAttribute('class', get_class($this)); foreach ($this->attributes as $sp3eec35 => $spbb4d96) { $spcefb62->appendChild($spd4a003 = $sp25cd3b->createElement('attribute')); $spd4a003->setAttribute('name', $sp3eec35); $spd4a003->appendChild($sp25cd3b->createTextNode($spbb4d96)); } foreach ($this->nodes as $sp3eec35 => $sp96b41e) { if (null === $sp96b41e) { continue; } $sp4f39e2 = $sp96b41e->toXml(true)->getElementsByTagName('node')->item(0); $sp4f39e2 = $sp25cd3b->importNode($sp4f39e2, true); $sp4f39e2->setAttribute('name', $sp3eec35); $spcefb62->appendChild($sp4f39e2); } return $spe9c0cb ? $sp25cd3b : $sp25cd3b->saveXml(); } public function compile(Twig_Compiler $spa1c015) { foreach ($this->nodes as $spcefb62) { $spcefb62->compile($spa1c015); } } public function getLine() { return $this->lineno; } public function getNodeTag() { return $this->tag; } public function hasAttribute($sp3eec35) { return array_key_exists($sp3eec35, $this->attributes); } public function getAttribute($sp3eec35) { if (!array_key_exists($sp3eec35, $this->attributes)) { throw new LogicException(sprintf('Attribute "%s" does not exist for Node "%s".', $sp3eec35, get_class($this))); } return $this->attributes[$sp3eec35]; } public function setAttribute($sp3eec35, $spbb4d96) { $this->attributes[$sp3eec35] = $spbb4d96; } public function removeAttribute($sp3eec35) { unset($this->attributes[$sp3eec35]); } public function hasNode($sp3eec35) { return array_key_exists($sp3eec35, $this->nodes); } public function getNode($sp3eec35) { if (!array_key_exists($sp3eec35, $this->nodes)) { throw new LogicException(sprintf('Node "%s" does not exist for Node "%s".', $sp3eec35, get_class($this))); } return $this->nodes[$sp3eec35]; } public function setNode($sp3eec35, $spcefb62 = null) { $this->nodes[$sp3eec35] = $spcefb62; } public function removeNode($sp3eec35) { unset($this->nodes[$sp3eec35]); } public function count() { return count($this->nodes); } public function getIterator() { return new ArrayIterator($this->nodes); } }