<?php
class Twig_TokenParser_Set extends Twig_TokenParser { public function parse(Twig_Token $sp650e38) { $sp1f599c = $sp650e38->getLine(); $sp8ec2ac = $this->parser->getStream(); $sp5d289c = $this->parser->getExpressionParser()->parseAssignmentExpression(); $spb5d187 = false; if ($sp8ec2ac->nextIf(Twig_Token::OPERATOR_TYPE, '=')) { $sp14b89a = $this->parser->getExpressionParser()->parseMultitargetExpression(); $sp8ec2ac->expect(Twig_Token::BLOCK_END_TYPE); if (count($sp5d289c) !== count($sp14b89a)) { throw new Twig_Error_Syntax('When using set, you must have the same number of variables and assignments.', $sp8ec2ac->getCurrent()->getLine(), $sp8ec2ac->getFilename()); } } else { $spb5d187 = true; if (count($sp5d289c) > 1) { throw new Twig_Error_Syntax('When using set with a block, you cannot have a multi-target.', $sp8ec2ac->getCurrent()->getLine(), $sp8ec2ac->getFilename()); } $sp8ec2ac->expect(Twig_Token::BLOCK_END_TYPE); $sp14b89a = $this->parser->subparse(array($this, 'decideBlockEnd'), true); $sp8ec2ac->expect(Twig_Token::BLOCK_END_TYPE); } return new Twig_Node_Set($spb5d187, $sp5d289c, $sp14b89a, $sp1f599c, $this->getTag()); } public function decideBlockEnd(Twig_Token $sp650e38) { return $sp650e38->test('endset'); } public function getTag() { return 'set'; } }