<?php
class Twig_Tests_ExpressionParserTest extends PHPUnit_Framework_TestCase { public function testCanOnlyAssignToNames($spe32893) { $spf4b92b = new Twig_Environment($this->getMock('Twig_LoaderInterface'), array('cache' => false, 'autoescape' => false)); $sp284ef6 = new Twig_Parser($spf4b92b); $sp284ef6->parse($spf4b92b->tokenize($spe32893, 'index')); } public function getFailingTestsForAssignment() { return array(array('{% set false = "foo" %}'), array('{% set true = "foo" %}'), array('{% set none = "foo" %}'), array('{% set 3 = "foo" %}'), array('{% set 1 + 2 = "foo" %}'), array('{% set "bar" = "foo" %}'), array('{% set %}{% endset %}')); } public function testArrayExpression($spe32893, $spc4a4e4) { $spf4b92b = new Twig_Environment($this->getMock('Twig_LoaderInterface'), array('cache' => false, 'autoescape' => false)); $sp8ec2ac = $spf4b92b->tokenize($spe32893, 'index'); $sp284ef6 = new Twig_Parser($spf4b92b); $this->assertEquals($spc4a4e4, $sp284ef6->parse($sp8ec2ac)->getNode('body')->getNode(0)->getNode('expr')); } public function testArraySyntaxError($spe32893) { $spf4b92b = new Twig_Environment($this->getMock('Twig_LoaderInterface'), array('cache' => false, 'autoescape' => false)); $sp284ef6 = new Twig_Parser($spf4b92b); $sp284ef6->parse($spf4b92b->tokenize($spe32893, 'index')); } public function getFailingTestsForArray() { return array(array('{{ [1, "a": "b"] }}'), array('{{ {"a": "b", 2} }}')); } public function getTestsForArray() { return array(array('{{ [1, 2] }}', new Twig_Node_Expression_Array(array(new Twig_Node_Expression_Constant(0, 1), new Twig_Node_Expression_Constant(1, 1), new Twig_Node_Expression_Constant(1, 1), new Twig_Node_Expression_Constant(2, 1)), 1)), array('{{ [1, 2, ] }}', new Twig_Node_Expression_Array(array(new Twig_Node_Expression_Constant(0, 1), new Twig_Node_Expression_Constant(1, 1), new Twig_Node_Expression_Constant(1, 1), new Twig_Node_Expression_Constant(2, 1)), 1)), array('{{ {"a": "b", "b": "c"} }}', new Twig_Node_Expression_Array(array(new Twig_Node_Expression_Constant('a', 1), new Twig_Node_Expression_Constant('b', 1), new Twig_Node_Expression_Constant('b', 1), new Twig_Node_Expression_Constant('c', 1)), 1)), array('{{ {"a": "b", "b": "c", } }}', new Twig_Node_Expression_Array(array(new Twig_Node_Expression_Constant('a', 1), new Twig_Node_Expression_Constant('b', 1), new Twig_Node_Expression_Constant('b', 1), new Twig_Node_Expression_Constant('c', 1)), 1)), array('{{ [1, {"a": "b", "b": "c"}] }}', new Twig_Node_Expression_Array(array(new Twig_Node_Expression_Constant(0, 1), new Twig_Node_Expression_Constant(1, 1), new Twig_Node_Expression_Constant(1, 1), new Twig_Node_Expression_Array(array(new Twig_Node_Expression_Constant('a', 1), new Twig_Node_Expression_Constant('b', 1), new Twig_Node_Expression_Constant('b', 1), new Twig_Node_Expression_Constant('c', 1)), 1)), 1)), array('{{ {"a": [1, 2], "b": "c"} }}', new Twig_Node_Expression_Array(array(new Twig_Node_Expression_Constant('a', 1), new Twig_Node_Expression_Array(array(new Twig_Node_Expression_Constant(0, 1), new Twig_Node_Expression_Constant(1, 1), new Twig_Node_Expression_Constant(1, 1), new Twig_Node_Expression_Constant(2, 1)), 1), new Twig_Node_Expression_Constant('b', 1), new Twig_Node_Expression_Constant('c', 1)), 1))); } public function testStringExpressionDoesNotConcatenateTwoConsecutiveStrings() { $spf4b92b = new Twig_Environment($this->getMock('Twig_LoaderInterface'), array('cache' => false, 'autoescape' => false, 'optimizations' => 0)); $sp8ec2ac = $spf4b92b->tokenize('{{ "a" "b" }}', 'index'); $sp284ef6 = new Twig_Parser($spf4b92b); $sp284ef6->parse($sp8ec2ac); } public function testStringExpression($spe32893, $spc4a4e4) { $spf4b92b = new Twig_Environment($this->getMock('Twig_LoaderInterface'), array('cache' => false, 'autoescape' => false, 'optimizations' => 0)); $sp8ec2ac = $spf4b92b->tokenize($spe32893, 'index'); $sp284ef6 = new Twig_Parser($spf4b92b); $this->assertEquals($spc4a4e4, $sp284ef6->parse($sp8ec2ac)->getNode('body')->getNode(0)->getNode('expr')); } public function getTestsForString() { return array(array('{{ "foo" }}', new Twig_Node_Expression_Constant('foo', 1)), array('{{ "foo #{bar}" }}', new Twig_Node_Expression_Binary_Concat(new Twig_Node_Expression_Constant('foo ', 1), new Twig_Node_Expression_Name('bar', 1), 1)), array('{{ "foo #{bar} baz" }}', new Twig_Node_Expression_Binary_Concat(new Twig_Node_Expression_Binary_Concat(new Twig_Node_Expression_Constant('foo ', 1), new Twig_Node_Expression_Name('bar', 1), 1), new Twig_Node_Expression_Constant(' baz', 1), 1)), array('{{ "foo #{"foo #{bar} baz"} baz" }}', new Twig_Node_Expression_Binary_Concat(new Twig_Node_Expression_Binary_Concat(new Twig_Node_Expression_Constant('foo ', 1), new Twig_Node_Expression_Binary_Concat(new Twig_Node_Expression_Binary_Concat(new Twig_Node_Expression_Constant('foo ', 1), new Twig_Node_Expression_Name('bar', 1), 1), new Twig_Node_Expression_Constant(' baz', 1), 1), 1), new Twig_Node_Expression_Constant(' baz', 1), 1))); } public function testAttributeCallDoesNotSupportNamedArguments() { $spf4b92b = new Twig_Environment($this->getMock('Twig_LoaderInterface'), array('cache' => false, 'autoescape' => false)); $sp284ef6 = new Twig_Parser($spf4b92b); $sp284ef6->parse($spf4b92b->tokenize('{{ foo.bar(name="Foo") }}', 'index')); } public function testMacroCallDoesNotSupportNamedArguments() { $spf4b92b = new Twig_Environment($this->getMock('Twig_LoaderInterface'), array('cache' => false, 'autoescape' => false)); $sp284ef6 = new Twig_Parser($spf4b92b); $sp284ef6->parse($spf4b92b->tokenize('{% from _self import foo %}{% macro foo() %}{% endmacro %}{{ foo(name="Foo") }}', 'index')); } public function testMacroDefinitionDoesNotSupportNonNameVariableName() { $spf4b92b = new Twig_Environment($this->getMock('Twig_LoaderInterface'), array('cache' => false, 'autoescape' => false)); $sp284ef6 = new Twig_Parser($spf4b92b); $sp284ef6->parse($spf4b92b->tokenize('{% macro foo("a") %}{% endmacro %}', 'index')); } public function testMacroDefinitionDoesNotSupportNonConstantDefaultValues($spe32893) { $spf4b92b = new Twig_Environment($this->getMock('Twig_LoaderInterface'), array('cache' => false, 'autoescape' => false)); $sp284ef6 = new Twig_Parser($spf4b92b); $sp284ef6->parse($spf4b92b->tokenize($spe32893, 'index')); } public function getMacroDefinitionDoesNotSupportNonConstantDefaultValues() { return array(array('{% macro foo(name = "a #{foo} a") %}{% endmacro %}'), array('{% macro foo(name = [["b", "a #{foo} a"]]) %}{% endmacro %}')); } public function testMacroDefinitionSupportsConstantDefaultValues($spe32893) { $spf4b92b = new Twig_Environment($this->getMock('Twig_LoaderInterface'), array('cache' => false, 'autoescape' => false)); $sp284ef6 = new Twig_Parser($spf4b92b); $sp284ef6->parse($spf4b92b->tokenize($spe32893, 'index')); } public function getMacroDefinitionSupportsConstantDefaultValues() { return array(array('{% macro foo(name = "aa") %}{% endmacro %}'), array('{% macro foo(name = 12) %}{% endmacro %}'), array('{% macro foo(name = true) %}{% endmacro %}'), array('{% macro foo(name = ["a"]) %}{% endmacro %}'), array('{% macro foo(name = [["a"]]) %}{% endmacro %}'), array('{% macro foo(name = {a: "a"}) %}{% endmacro %}'), array('{% macro foo(name = {a: {b: "a"}}) %}{% endmacro %}')); } public function testUnknownFunction() { $spf4b92b = new Twig_Environment($this->getMock('Twig_LoaderInterface'), array('cache' => false, 'autoescape' => false)); $sp284ef6 = new Twig_Parser($spf4b92b); $sp284ef6->parse($spf4b92b->tokenize('{{ cycl() }}', 'index')); } public function testUnknownFilter() { $spf4b92b = new Twig_Environment($this->getMock('Twig_LoaderInterface'), array('cache' => false, 'autoescape' => false)); $sp284ef6 = new Twig_Parser($spf4b92b); $sp284ef6->parse($spf4b92b->tokenize('{{ 1|lowe }}', 'index')); } public function testUnknownTest() { $spf4b92b = new Twig_Environment($this->getMock('Twig_LoaderInterface'), array('cache' => false, 'autoescape' => false)); $sp284ef6 = new Twig_Parser($spf4b92b); $sp284ef6->parse($spf4b92b->tokenize('{{ 1 is nul }}', 'index')); } }