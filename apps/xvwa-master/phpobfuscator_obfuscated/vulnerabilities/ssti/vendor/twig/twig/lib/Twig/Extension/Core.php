<?php
if (!defined('ENT_SUBSTITUTE')) { define('ENT_SUBSTITUTE', 0); } class Twig_Extension_Core extends Twig_Extension { protected $dateFormats = array('F j, Y H:i', '%d days'); protected $numberFormat = array(0, '.', ','); protected $timezone = null; protected $escapers = array(); public function setEscaper($spf18dce, $sp9a2590) { $this->escapers[$spf18dce] = $sp9a2590; } public function getEscapers() { return $this->escapers; } public function setDateFormat($spabf47d = null, $sp9ebfbe = null) { if (null !== $spabf47d) { $this->dateFormats[0] = $spabf47d; } if (null !== $sp9ebfbe) { $this->dateFormats[1] = $sp9ebfbe; } } public function getDateFormat() { return $this->dateFormats; } public function setTimezone($sp1e6631) { $this->timezone = $sp1e6631 instanceof DateTimeZone ? $sp1e6631 : new DateTimeZone($sp1e6631); } public function getTimezone() { if (null === $this->timezone) { $this->timezone = new DateTimeZone(date_default_timezone_get()); } return $this->timezone; } public function setNumberFormat($sp422fff, $sp4f171a, $spb175ee) { $this->numberFormat = array($sp422fff, $sp4f171a, $spb175ee); } public function getNumberFormat() { return $this->numberFormat; } public function getTokenParsers() { return array(new Twig_TokenParser_For(), new Twig_TokenParser_If(), new Twig_TokenParser_Extends(), new Twig_TokenParser_Include(), new Twig_TokenParser_Block(), new Twig_TokenParser_Use(), new Twig_TokenParser_Filter(), new Twig_TokenParser_Macro(), new Twig_TokenParser_Import(), new Twig_TokenParser_From(), new Twig_TokenParser_Set(), new Twig_TokenParser_Spaceless(), new Twig_TokenParser_Flush(), new Twig_TokenParser_Do(), new Twig_TokenParser_Embed()); } public function getFilters() { $sp34c924 = array(new Twig_SimpleFilter('date', 'twig_date_format_filter', array('needs_environment' => true)), new Twig_SimpleFilter('date_modify', 'twig_date_modify_filter', array('needs_environment' => true)), new Twig_SimpleFilter('format', 'sprintf'), new Twig_SimpleFilter('replace', 'strtr'), new Twig_SimpleFilter('number_format', 'twig_number_format_filter', array('needs_environment' => true)), new Twig_SimpleFilter('abs', 'abs'), new Twig_SimpleFilter('round', 'twig_round'), new Twig_SimpleFilter('url_encode', 'twig_urlencode_filter'), new Twig_SimpleFilter('json_encode', 'twig_jsonencode_filter'), new Twig_SimpleFilter('convert_encoding', 'twig_convert_encoding'), new Twig_SimpleFilter('title', 'twig_title_string_filter', array('needs_environment' => true)), new Twig_SimpleFilter('capitalize', 'twig_capitalize_string_filter', array('needs_environment' => true)), new Twig_SimpleFilter('upper', 'strtoupper'), new Twig_SimpleFilter('lower', 'strtolower'), new Twig_SimpleFilter('striptags', 'strip_tags'), new Twig_SimpleFilter('trim', 'trim'), new Twig_SimpleFilter('nl2br', 'nl2br', array('pre_escape' => 'html', 'is_safe' => array('html'))), new Twig_SimpleFilter('join', 'twig_join_filter'), new Twig_SimpleFilter('split', 'twig_split_filter', array('needs_environment' => true)), new Twig_SimpleFilter('sort', 'twig_sort_filter'), new Twig_SimpleFilter('merge', 'twig_array_merge'), new Twig_SimpleFilter('batch', 'twig_array_batch'), new Twig_SimpleFilter('reverse', 'twig_reverse_filter', array('needs_environment' => true)), new Twig_SimpleFilter('length', 'twig_length_filter', array('needs_environment' => true)), new Twig_SimpleFilter('slice', 'twig_slice', array('needs_environment' => true)), new Twig_SimpleFilter('first', 'twig_first', array('needs_environment' => true)), new Twig_SimpleFilter('last', 'twig_last', array('needs_environment' => true)), new Twig_SimpleFilter('default', '_twig_default_filter', array('node_class' => 'Twig_Node_Expression_Filter_Default')), new Twig_SimpleFilter('keys', 'twig_get_array_keys_filter'), new Twig_SimpleFilter('escape', 'twig_escape_filter', array('needs_environment' => true, 'is_safe_callback' => 'twig_escape_filter_is_safe')), new Twig_SimpleFilter('e', 'twig_escape_filter', array('needs_environment' => true, 'is_safe_callback' => 'twig_escape_filter_is_safe'))); if (function_exists('mb_get_info')) { $sp34c924[] = new Twig_SimpleFilter('upper', 'twig_upper_filter', array('needs_environment' => true)); $sp34c924[] = new Twig_SimpleFilter('lower', 'twig_lower_filter', array('needs_environment' => true)); } return $sp34c924; } public function getFunctions() { return array(new Twig_SimpleFunction('max', 'max'), new Twig_SimpleFunction('min', 'min'), new Twig_SimpleFunction('range', 'range'), new Twig_SimpleFunction('constant', 'twig_constant'), new Twig_SimpleFunction('cycle', 'twig_cycle'), new Twig_SimpleFunction('random', 'twig_random', array('needs_environment' => true)), new Twig_SimpleFunction('date', 'twig_date_converter', array('needs_environment' => true)), new Twig_SimpleFunction('include', 'twig_include', array('needs_environment' => true, 'needs_context' => true, 'is_safe' => array('all'))), new Twig_SimpleFunction('source', 'twig_source', array('needs_environment' => true, 'is_safe' => array('all')))); } public function getTests() { return array(new Twig_SimpleTest('even', null, array('node_class' => 'Twig_Node_Expression_Test_Even')), new Twig_SimpleTest('odd', null, array('node_class' => 'Twig_Node_Expression_Test_Odd')), new Twig_SimpleTest('defined', null, array('node_class' => 'Twig_Node_Expression_Test_Defined')), new Twig_SimpleTest('sameas', null, array('node_class' => 'Twig_Node_Expression_Test_Sameas')), new Twig_SimpleTest('same as', null, array('node_class' => 'Twig_Node_Expression_Test_Sameas')), new Twig_SimpleTest('none', null, array('node_class' => 'Twig_Node_Expression_Test_Null')), new Twig_SimpleTest('null', null, array('node_class' => 'Twig_Node_Expression_Test_Null')), new Twig_SimpleTest('divisibleby', null, array('node_class' => 'Twig_Node_Expression_Test_Divisibleby')), new Twig_SimpleTest('divisible by', null, array('node_class' => 'Twig_Node_Expression_Test_Divisibleby')), new Twig_SimpleTest('constant', null, array('node_class' => 'Twig_Node_Expression_Test_Constant')), new Twig_SimpleTest('empty', 'twig_test_empty'), new Twig_SimpleTest('iterable', 'twig_test_iterable')); } public function getOperators() { return array(array('not' => array('precedence' => 50, 'class' => 'Twig_Node_Expression_Unary_Not'), '-' => array('precedence' => 500, 'class' => 'Twig_Node_Expression_Unary_Neg'), '+' => array('precedence' => 500, 'class' => 'Twig_Node_Expression_Unary_Pos')), array('or' => array('precedence' => 10, 'class' => 'Twig_Node_Expression_Binary_Or', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), 'and' => array('precedence' => 15, 'class' => 'Twig_Node_Expression_Binary_And', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), 'b-or' => array('precedence' => 16, 'class' => 'Twig_Node_Expression_Binary_BitwiseOr', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), 'b-xor' => array('precedence' => 17, 'class' => 'Twig_Node_Expression_Binary_BitwiseXor', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), 'b-and' => array('precedence' => 18, 'class' => 'Twig_Node_Expression_Binary_BitwiseAnd', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), '==' => array('precedence' => 20, 'class' => 'Twig_Node_Expression_Binary_Equal', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), '!=' => array('precedence' => 20, 'class' => 'Twig_Node_Expression_Binary_NotEqual', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), '<' => array('precedence' => 20, 'class' => 'Twig_Node_Expression_Binary_Less', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), '>' => array('precedence' => 20, 'class' => 'Twig_Node_Expression_Binary_Greater', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), '>=' => array('precedence' => 20, 'class' => 'Twig_Node_Expression_Binary_GreaterEqual', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), '<=' => array('precedence' => 20, 'class' => 'Twig_Node_Expression_Binary_LessEqual', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), 'not in' => array('precedence' => 20, 'class' => 'Twig_Node_Expression_Binary_NotIn', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), 'in' => array('precedence' => 20, 'class' => 'Twig_Node_Expression_Binary_In', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), 'matches' => array('precedence' => 20, 'class' => 'Twig_Node_Expression_Binary_Matches', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), 'starts with' => array('precedence' => 20, 'class' => 'Twig_Node_Expression_Binary_StartsWith', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), 'ends with' => array('precedence' => 20, 'class' => 'Twig_Node_Expression_Binary_EndsWith', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), '..' => array('precedence' => 25, 'class' => 'Twig_Node_Expression_Binary_Range', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), '+' => array('precedence' => 30, 'class' => 'Twig_Node_Expression_Binary_Add', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), '-' => array('precedence' => 30, 'class' => 'Twig_Node_Expression_Binary_Sub', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), '~' => array('precedence' => 40, 'class' => 'Twig_Node_Expression_Binary_Concat', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), '*' => array('precedence' => 60, 'class' => 'Twig_Node_Expression_Binary_Mul', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), '/' => array('precedence' => 60, 'class' => 'Twig_Node_Expression_Binary_Div', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), '//' => array('precedence' => 60, 'class' => 'Twig_Node_Expression_Binary_FloorDiv', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), '%' => array('precedence' => 60, 'class' => 'Twig_Node_Expression_Binary_Mod', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), 'is' => array('precedence' => 100, 'callable' => array($this, 'parseTestExpression'), 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), 'is not' => array('precedence' => 100, 'callable' => array($this, 'parseNotTestExpression'), 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), '**' => array('precedence' => 200, 'class' => 'Twig_Node_Expression_Binary_Power', 'associativity' => Twig_ExpressionParser::OPERATOR_RIGHT))); } public function parseNotTestExpression(Twig_Parser $sp284ef6, Twig_NodeInterface $spcefb62) { return new Twig_Node_Expression_Unary_Not($this->parseTestExpression($sp284ef6, $spcefb62), $sp284ef6->getCurrentToken()->getLine()); } public function parseTestExpression(Twig_Parser $sp284ef6, Twig_NodeInterface $spcefb62) { $sp8ec2ac = $sp284ef6->getStream(); $sp3eec35 = $this->getTestName($sp284ef6, $spcefb62->getLine()); $spbd0159 = $this->getTestNodeClass($sp284ef6, $sp3eec35); $spc5cc06 = null; if ($sp8ec2ac->test(Twig_Token::PUNCTUATION_TYPE, '(')) { $spc5cc06 = $sp284ef6->getExpressionParser()->parseArguments(true); } return new $spbd0159($spcefb62, $sp3eec35, $spc5cc06, $sp284ef6->getCurrentToken()->getLine()); } protected function getTestName(Twig_Parser $sp284ef6, $sp1a6fde) { $sp8ec2ac = $sp284ef6->getStream(); $sp3eec35 = $sp8ec2ac->expect(Twig_Token::NAME_TYPE)->getValue(); $spf4b92b = $sp284ef6->getEnvironment(); $sp6d12dd = $spf4b92b->getTests(); if (isset($sp6d12dd[$sp3eec35])) { return $sp3eec35; } if ($sp8ec2ac->test(Twig_Token::NAME_TYPE)) { $sp3eec35 = $sp3eec35 . ' ' . $sp284ef6->getCurrentToken()->getValue(); if (isset($sp6d12dd[$sp3eec35])) { $sp284ef6->getStream()->next(); return $sp3eec35; } } $sp9f2d02 = sprintf('The test "%s" does not exist', $sp3eec35); if ($sp249a0e = $spf4b92b->computeAlternatives($sp3eec35, array_keys($sp6d12dd))) { $sp9f2d02 = sprintf('%s. Did you mean "%s"', $sp9f2d02, implode('", "', $sp249a0e)); } throw new Twig_Error_Syntax($sp9f2d02, $sp1a6fde, $sp284ef6->getFilename()); } protected function getTestNodeClass(Twig_Parser $sp284ef6, $sp3eec35) { $spf4b92b = $sp284ef6->getEnvironment(); $sp6d12dd = $spf4b92b->getTests(); if ($sp6d12dd[$sp3eec35] instanceof Twig_SimpleTest) { return $sp6d12dd[$sp3eec35]->getNodeClass(); } return $sp6d12dd[$sp3eec35] instanceof Twig_Test_Node ? $sp6d12dd[$sp3eec35]->getClass() : 'Twig_Node_Expression_Test'; } public function getName() { return 'core'; } } function twig_cycle($sp14b89a, $sp1c15b8) { if (!is_array($sp14b89a) && !$sp14b89a instanceof ArrayAccess) { return $sp14b89a; } return $sp14b89a[$sp1c15b8 % count($sp14b89a)]; } function twig_random(Twig_Environment $spf4b92b, $sp14b89a = null) { if (null === $sp14b89a) { return mt_rand(); } if (is_int($sp14b89a) || is_float($sp14b89a)) { return $sp14b89a < 0 ? mt_rand($sp14b89a, 0) : mt_rand(0, $sp14b89a); } if ($sp14b89a instanceof Traversable) { $sp14b89a = iterator_to_array($sp14b89a); } elseif (is_string($sp14b89a)) { if ('' === $sp14b89a) { return ''; } if (null !== ($spdc716e = $spf4b92b->getCharset())) { if ('UTF-8' != $spdc716e) { $sp14b89a = twig_convert_encoding($sp14b89a, 'UTF-8', $spdc716e); } $sp14b89a = preg_split('/(?<!^)(?!$)/u', $sp14b89a); if ('UTF-8' != $spdc716e) { foreach ($sp14b89a as $spc83c7f => $spbb4d96) { $sp14b89a[$spc83c7f] = twig_convert_encoding($spbb4d96, $spdc716e, 'UTF-8'); } } } else { return $sp14b89a[mt_rand(0, strlen($sp14b89a) - 1)]; } } if (!is_array($sp14b89a)) { return $sp14b89a; } if (0 === count($sp14b89a)) { throw new Twig_Error_Runtime('The random function cannot pick from an empty array.'); } return $sp14b89a[array_rand($sp14b89a, 1)]; } function twig_date_format_filter(Twig_Environment $spf4b92b, $spc875e4, $spabf47d = null, $sp1e6631 = null) { if (null === $spabf47d) { $sp82e696 = $spf4b92b->getExtension('core')->getDateFormat(); $spabf47d = $spc875e4 instanceof DateInterval ? $sp82e696[1] : $sp82e696[0]; } if ($spc875e4 instanceof DateInterval) { return $spc875e4->format($spabf47d); } return twig_date_converter($spf4b92b, $spc875e4, $sp1e6631)->format($spabf47d); } function twig_date_modify_filter(Twig_Environment $spf4b92b, $spc875e4, $spdf8562) { $spc875e4 = twig_date_converter($spf4b92b, $spc875e4, false); $spe20062 = $spc875e4->modify($spdf8562); return null === $spe20062 ? $spc875e4 : $spe20062; } function twig_date_converter(Twig_Environment $spf4b92b, $spc875e4 = null, $sp1e6631 = null) { if (false !== $sp1e6631) { if (null === $sp1e6631) { $sp1e6631 = $spf4b92b->getExtension('core')->getTimezone(); } elseif (!$sp1e6631 instanceof DateTimeZone) { $sp1e6631 = new DateTimeZone($sp1e6631); } } if ($spc875e4 instanceof DateTimeImmutable) { return false !== $sp1e6631 ? $spc875e4->setTimezone($sp1e6631) : $spc875e4; } if ($spc875e4 instanceof DateTime || $spc875e4 instanceof DateTimeInterface) { $spc875e4 = clone $spc875e4; if (false !== $sp1e6631) { $spc875e4->setTimezone($sp1e6631); } return $spc875e4; } $sp0bba70 = (string) $spc875e4; if (ctype_digit($sp0bba70) || !empty($sp0bba70) && '-' === $sp0bba70[0] && ctype_digit(substr($sp0bba70, 1))) { $spc875e4 = '@' . $spc875e4; } $spc875e4 = new DateTime($spc875e4, $spf4b92b->getExtension('core')->getTimezone()); if (false !== $sp1e6631) { $spc875e4->setTimezone($sp1e6631); } return $spc875e4; } function twig_round($spbb4d96, $sp07a5fa = 0, $sp810c92 = 'common') { if ('common' == $sp810c92) { return round($spbb4d96, $sp07a5fa); } if ('ceil' != $sp810c92 && 'floor' != $sp810c92) { throw new Twig_Error_Runtime('The round filter only supports the "common", "ceil", and "floor" methods.'); } return $sp810c92($spbb4d96 * pow(10, $sp07a5fa)) / pow(10, $sp07a5fa); } function twig_number_format_filter(Twig_Environment $spf4b92b, $sp7cdeab, $sp422fff = null, $sp4f171a = null, $spb175ee = null) { $sp02c601 = $spf4b92b->getExtension('core')->getNumberFormat(); if (null === $sp422fff) { $sp422fff = $sp02c601[0]; } if (null === $sp4f171a) { $sp4f171a = $sp02c601[1]; } if (null === $spb175ee) { $spb175ee = $sp02c601[2]; } return number_format((double) $sp7cdeab, $sp422fff, $sp4f171a, $spb175ee); } function twig_urlencode_filter($sp1f65b5) { if (is_array($sp1f65b5)) { if (defined('PHP_QUERY_RFC3986')) { return http_build_query($sp1f65b5, '', '&', PHP_QUERY_RFC3986); } return http_build_query($sp1f65b5, '', '&'); } return rawurlencode($sp1f65b5); } if (PHP_VERSION_ID < 50300) { function twig_jsonencode_filter($spbb4d96, $sp44f03d = 0) { if ($spbb4d96 instanceof Twig_Markup) { $spbb4d96 = (string) $spbb4d96; } elseif (is_array($spbb4d96)) { array_walk_recursive($spbb4d96, '_twig_markup2string'); } return json_encode($spbb4d96); } } else { function twig_jsonencode_filter($spbb4d96, $sp44f03d = 0) { if ($spbb4d96 instanceof Twig_Markup) { $spbb4d96 = (string) $spbb4d96; } elseif (is_array($spbb4d96)) { array_walk_recursive($spbb4d96, '_twig_markup2string'); } return json_encode($spbb4d96, $sp44f03d); } } function _twig_markup2string(&$spbb4d96) { if ($spbb4d96 instanceof Twig_Markup) { $spbb4d96 = (string) $spbb4d96; } } function twig_array_merge($sp2d8a3a, $sp78d409) { if (!is_array($sp2d8a3a) || !is_array($sp78d409)) { throw new Twig_Error_Runtime(sprintf('The merge filter only works with arrays or hashes; %s and %s given.', gettype($sp2d8a3a), gettype($sp78d409))); } return array_merge($sp2d8a3a, $sp78d409); } function twig_slice(Twig_Environment $spf4b92b, $spb437e7, $sp321dc3, $sp64e7f0 = null, $sp9b1edd = false) { if ($spb437e7 instanceof Traversable) { if ($spb437e7 instanceof IteratorAggregate) { $spb437e7 = $spb437e7->getIterator(); } if ($sp321dc3 >= 0 && $sp64e7f0 >= 0 && $spb437e7 instanceof Iterator) { try { return iterator_to_array(new LimitIterator($spb437e7, $sp321dc3, $sp64e7f0 === null ? -1 : $sp64e7f0), $sp9b1edd); } catch (OutOfBoundsException $spbd276e) { return array(); } } $spb437e7 = iterator_to_array($spb437e7, $sp9b1edd); } if (is_array($spb437e7)) { return array_slice($spb437e7, $sp321dc3, $sp64e7f0, $sp9b1edd); } $spb437e7 = (string) $spb437e7; if (function_exists('mb_get_info') && null !== ($spdc716e = $spf4b92b->getCharset())) { return (string) mb_substr($spb437e7, $sp321dc3, null === $sp64e7f0 ? mb_strlen($spb437e7, $spdc716e) - $sp321dc3 : $sp64e7f0, $spdc716e); } return (string) (null === $sp64e7f0 ? substr($spb437e7, $sp321dc3) : substr($spb437e7, $sp321dc3, $sp64e7f0)); } function twig_first(Twig_Environment $spf4b92b, $spb437e7) { $sp892728 = twig_slice($spf4b92b, $spb437e7, 0, 1, false); return is_string($sp892728) ? $sp892728 : current($sp892728); } function twig_last(Twig_Environment $spf4b92b, $spb437e7) { $sp892728 = twig_slice($spf4b92b, $spb437e7, -1, 1, false); return is_string($sp892728) ? $sp892728 : current($sp892728); } function twig_join_filter($spbb4d96, $spa6c2c3 = '') { if ($spbb4d96 instanceof Traversable) { $spbb4d96 = iterator_to_array($spbb4d96, false); } return implode($spa6c2c3, (array) $spbb4d96); } function twig_split_filter(Twig_Environment $spf4b92b, $spbb4d96, $sp9535f0, $spbe259f = null) { if (!empty($sp9535f0)) { return null === $spbe259f ? explode($sp9535f0, $spbb4d96) : explode($sp9535f0, $spbb4d96, $spbe259f); } if (!function_exists('mb_get_info') || null === ($spdc716e = $spf4b92b->getCharset())) { return str_split($spbb4d96, null === $spbe259f ? 1 : $spbe259f); } if ($spbe259f <= 1) { return preg_split('/(?<!^)(?!$)/u', $spbb4d96); } $sp64e7f0 = mb_strlen($spbb4d96, $spdc716e); if ($sp64e7f0 < $spbe259f) { return array($spbb4d96); } $sp693624 = array(); for ($spc83c7f = 0; $spc83c7f < $sp64e7f0; $spc83c7f += $spbe259f) { $sp693624[] = mb_substr($spbb4d96, $spc83c7f, $spbe259f, $spdc716e); } return $sp693624; } function _twig_default_filter($spbb4d96, $sp093bdb = '') { if (twig_test_empty($spbb4d96)) { return $sp093bdb; } return $spbb4d96; } function twig_get_array_keys_filter($sp1d3170) { if (is_object($sp1d3170) && $sp1d3170 instanceof Traversable) { return array_keys(iterator_to_array($sp1d3170)); } if (!is_array($sp1d3170)) { return array(); } return array_keys($sp1d3170); } function twig_reverse_filter(Twig_Environment $spf4b92b, $spb437e7, $sp9b1edd = false) { if (is_object($spb437e7) && $spb437e7 instanceof Traversable) { return array_reverse(iterator_to_array($spb437e7), $sp9b1edd); } if (is_array($spb437e7)) { return array_reverse($spb437e7, $sp9b1edd); } if (null !== ($spdc716e = $spf4b92b->getCharset())) { $spa62ef5 = (string) $spb437e7; if ('UTF-8' != $spdc716e) { $spb437e7 = twig_convert_encoding($spa62ef5, 'UTF-8', $spdc716e); } preg_match_all('/./us', $spb437e7, $sp0b25b7); $spa62ef5 = implode('', array_reverse($sp0b25b7[0])); if ('UTF-8' != $spdc716e) { $spa62ef5 = twig_convert_encoding($spa62ef5, $spdc716e, 'UTF-8'); } return $spa62ef5; } return strrev((string) $spb437e7); } function twig_sort_filter($sp1d3170) { asort($sp1d3170); return $sp1d3170; } function twig_in_filter($spbb4d96, $spe40b7f) { if (is_array($spe40b7f)) { return in_array($spbb4d96, $spe40b7f, is_object($spbb4d96) || is_resource($spbb4d96)); } elseif (is_string($spe40b7f) && (is_string($spbb4d96) || is_int($spbb4d96) || is_float($spbb4d96))) { return '' === $spbb4d96 || false !== strpos($spe40b7f, (string) $spbb4d96); } elseif ($spe40b7f instanceof Traversable) { return in_array($spbb4d96, iterator_to_array($spe40b7f, false), is_object($spbb4d96) || is_resource($spbb4d96)); } return false; } function twig_escape_filter(Twig_Environment $spf4b92b, $spa62ef5, $spf18dce = 'html', $spdc716e = null, $sp684591 = false) { if ($sp684591 && $spa62ef5 instanceof Twig_Markup) { return $spa62ef5; } if (!is_string($spa62ef5)) { if (is_object($spa62ef5) && method_exists($spa62ef5, '__toString')) { $spa62ef5 = (string) $spa62ef5; } else { return $spa62ef5; } } if (null === $spdc716e) { $spdc716e = $spf4b92b->getCharset(); } switch ($spf18dce) { case 'html': static $htmlspecialcharsCharsets; if (null === $spaab111) { if (defined('HHVM_VERSION')) { $spaab111 = array('utf-8' => true, 'UTF-8' => true); } else { $spaab111 = array('ISO-8859-1' => true, 'ISO8859-1' => true, 'ISO-8859-15' => true, 'ISO8859-15' => true, 'utf-8' => true, 'UTF-8' => true, 'CP866' => true, 'IBM866' => true, '866' => true, 'CP1251' => true, 'WINDOWS-1251' => true, 'WIN-1251' => true, '1251' => true, 'CP1252' => true, 'WINDOWS-1252' => true, '1252' => true, 'KOI8-R' => true, 'KOI8-RU' => true, 'KOI8R' => true, 'BIG5' => true, '950' => true, 'GB2312' => true, '936' => true, 'BIG5-HKSCS' => true, 'SHIFT_JIS' => true, 'SJIS' => true, '932' => true, 'EUC-JP' => true, 'EUCJP' => true, 'ISO8859-5' => true, 'ISO-8859-5' => true, 'MACROMAN' => true); } } if (isset($spaab111[$spdc716e])) { return htmlspecialchars($spa62ef5, ENT_QUOTES | ENT_SUBSTITUTE, $spdc716e); } if (isset($spaab111[strtoupper($spdc716e)])) { $spaab111[$spdc716e] = true; return htmlspecialchars($spa62ef5, ENT_QUOTES | ENT_SUBSTITUTE, $spdc716e); } $spa62ef5 = twig_convert_encoding($spa62ef5, 'UTF-8', $spdc716e); $spa62ef5 = htmlspecialchars($spa62ef5, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8'); return twig_convert_encoding($spa62ef5, $spdc716e, 'UTF-8'); case 'js': if ('UTF-8' != $spdc716e) { $spa62ef5 = twig_convert_encoding($spa62ef5, 'UTF-8', $spdc716e); } if (0 == strlen($spa62ef5) ? false : (1 == preg_match('/^./su', $spa62ef5) ? false : true)) { throw new Twig_Error_Runtime('The string to escape is not a valid UTF-8 string.'); } $spa62ef5 = preg_replace_callback('#[^a-zA-Z0-9,\\._]#Su', '_twig_escape_js_callback', $spa62ef5); if ('UTF-8' != $spdc716e) { $spa62ef5 = twig_convert_encoding($spa62ef5, $spdc716e, 'UTF-8'); } return $spa62ef5; case 'css': if ('UTF-8' != $spdc716e) { $spa62ef5 = twig_convert_encoding($spa62ef5, 'UTF-8', $spdc716e); } if (0 == strlen($spa62ef5) ? false : (1 == preg_match('/^./su', $spa62ef5) ? false : true)) { throw new Twig_Error_Runtime('The string to escape is not a valid UTF-8 string.'); } $spa62ef5 = preg_replace_callback('#[^a-zA-Z0-9]#Su', '_twig_escape_css_callback', $spa62ef5); if ('UTF-8' != $spdc716e) { $spa62ef5 = twig_convert_encoding($spa62ef5, $spdc716e, 'UTF-8'); } return $spa62ef5; case 'html_attr': if ('UTF-8' != $spdc716e) { $spa62ef5 = twig_convert_encoding($spa62ef5, 'UTF-8', $spdc716e); } if (0 == strlen($spa62ef5) ? false : (1 == preg_match('/^./su', $spa62ef5) ? false : true)) { throw new Twig_Error_Runtime('The string to escape is not a valid UTF-8 string.'); } $spa62ef5 = preg_replace_callback('#[^a-zA-Z0-9,\\.\\-_]#Su', '_twig_escape_html_attr_callback', $spa62ef5); if ('UTF-8' != $spdc716e) { $spa62ef5 = twig_convert_encoding($spa62ef5, $spdc716e, 'UTF-8'); } return $spa62ef5; case 'url': if (PHP_VERSION_ID < 50300) { return str_replace('%7E', '~', rawurlencode($spa62ef5)); } return rawurlencode($spa62ef5); default: static $escapers; if (null === $sp10ab62) { $sp10ab62 = $spf4b92b->getExtension('core')->getEscapers(); } if (isset($sp10ab62[$spf18dce])) { return call_user_func($sp10ab62[$spf18dce], $spf4b92b, $spa62ef5, $spdc716e); } $sp6ec80b = implode(', ', array_merge(array('html', 'js', 'url', 'css', 'html_attr'), array_keys($sp10ab62))); throw new Twig_Error_Runtime(sprintf('Invalid escaping strategy "%s" (valid ones: %s).', $spf18dce, $sp6ec80b)); } } function twig_escape_filter_is_safe(Twig_Node $sp9f1878) { foreach ($sp9f1878 as $sp5ebab3) { if ($sp5ebab3 instanceof Twig_Node_Expression_Constant) { return array($sp5ebab3->getAttribute('value')); } return array(); } return array('html'); } if (function_exists('mb_convert_encoding')) { function twig_convert_encoding($spa62ef5, $sp82ec61, $spd13cdb) { return mb_convert_encoding($spa62ef5, $sp82ec61, $spd13cdb); } } elseif (function_exists('iconv')) { function twig_convert_encoding($spa62ef5, $sp82ec61, $spd13cdb) { return iconv($spd13cdb, $sp82ec61, $spa62ef5); } } else { function twig_convert_encoding($spa62ef5, $sp82ec61, $spd13cdb) { throw new Twig_Error_Runtime('No suitable convert encoding function (use UTF-8 as your encoding or install the iconv or mbstring extension).'); } } function _twig_escape_js_callback($sp0b25b7) { $sp676bd4 = $sp0b25b7[0]; if (!isset($sp676bd4[1])) { return '\\x' . strtoupper(substr('00' . bin2hex($sp676bd4), -2)); } $sp676bd4 = twig_convert_encoding($sp676bd4, 'UTF-16BE', 'UTF-8'); return '\\u' . strtoupper(substr('0000' . bin2hex($sp676bd4), -4)); } function _twig_escape_css_callback($sp0b25b7) { $sp676bd4 = $sp0b25b7[0]; if (!isset($sp676bd4[1])) { $sp1f1a5c = ltrim(strtoupper(bin2hex($sp676bd4)), '0'); if (0 === strlen($sp1f1a5c)) { $sp1f1a5c = '0'; } return '\\' . $sp1f1a5c . ' '; } $sp676bd4 = twig_convert_encoding($sp676bd4, 'UTF-16BE', 'UTF-8'); return '\\' . ltrim(strtoupper(bin2hex($sp676bd4)), '0') . ' '; } function _twig_escape_html_attr_callback($sp0b25b7) { static $entityMap = array(34 => 'quot', 38 => 'amp', 60 => 'lt', 62 => 'gt'); $sp11adf1 = $sp0b25b7[0]; $sp6aeca9 = ord($sp11adf1); if ($sp6aeca9 <= 31 && $sp11adf1 != '	' && $sp11adf1 != '
' && $sp11adf1 != '' || $sp6aeca9 >= 127 && $sp6aeca9 <= 159) { return '&#xFFFD;'; } if (strlen($sp11adf1) == 1) { $sp1f1a5c = strtoupper(substr('00' . bin2hex($sp11adf1), -2)); } else { $sp11adf1 = twig_convert_encoding($sp11adf1, 'UTF-16BE', 'UTF-8'); $sp1f1a5c = strtoupper(substr('0000' . bin2hex($sp11adf1), -4)); } $spc2bf0d = hexdec($sp1f1a5c); if (array_key_exists($spc2bf0d, $spf5cc53)) { return sprintf('&%s;', $spf5cc53[$spc2bf0d]); } return sprintf('&#x%s;', $sp1f1a5c); } if (function_exists('mb_get_info')) { function twig_length_filter(Twig_Environment $spf4b92b, $sp4a21bc) { return is_scalar($sp4a21bc) ? mb_strlen($sp4a21bc, $spf4b92b->getCharset()) : count($sp4a21bc); } function twig_upper_filter(Twig_Environment $spf4b92b, $spa62ef5) { if (null !== ($spdc716e = $spf4b92b->getCharset())) { return mb_strtoupper($spa62ef5, $spdc716e); } return strtoupper($spa62ef5); } function twig_lower_filter(Twig_Environment $spf4b92b, $spa62ef5) { if (null !== ($spdc716e = $spf4b92b->getCharset())) { return mb_strtolower($spa62ef5, $spdc716e); } return strtolower($spa62ef5); } function twig_title_string_filter(Twig_Environment $spf4b92b, $spa62ef5) { if (null !== ($spdc716e = $spf4b92b->getCharset())) { return mb_convert_case($spa62ef5, MB_CASE_TITLE, $spdc716e); } return ucwords(strtolower($spa62ef5)); } function twig_capitalize_string_filter(Twig_Environment $spf4b92b, $spa62ef5) { if (null !== ($spdc716e = $spf4b92b->getCharset())) { return mb_strtoupper(mb_substr($spa62ef5, 0, 1, $spdc716e), $spdc716e) . mb_strtolower(mb_substr($spa62ef5, 1, mb_strlen($spa62ef5, $spdc716e), $spdc716e), $spdc716e); } return ucfirst(strtolower($spa62ef5)); } } else { function twig_length_filter(Twig_Environment $spf4b92b, $sp4a21bc) { return is_scalar($sp4a21bc) ? strlen($sp4a21bc) : count($sp4a21bc); } function twig_title_string_filter(Twig_Environment $spf4b92b, $spa62ef5) { return ucwords(strtolower($spa62ef5)); } function twig_capitalize_string_filter(Twig_Environment $spf4b92b, $spa62ef5) { return ucfirst(strtolower($spa62ef5)); } } function twig_ensure_traversable($spf6a5d7) { if ($spf6a5d7 instanceof Traversable || is_array($spf6a5d7)) { return $spf6a5d7; } return array(); } function twig_test_empty($spbb4d96) { if ($spbb4d96 instanceof Countable) { return 0 == count($spbb4d96); } return '' === $spbb4d96 || false === $spbb4d96 || null === $spbb4d96 || array() === $spbb4d96; } function twig_test_iterable($spbb4d96) { return $spbb4d96 instanceof Traversable || is_array($spbb4d96); } function twig_include(Twig_Environment $spf4b92b, $spdacfa9, $spe32893, $sp3186fb = array(), $sp244218 = true, $spb97f33 = false, $spaff731 = false) { $sp5d6e82 = false; $sp2c38ff = null; if ($sp244218) { $sp3186fb = array_merge($spdacfa9, $sp3186fb); } if ($sp47620a = $spaff731 && $spf4b92b->hasExtension('sandbox')) { $sp2c38ff = $spf4b92b->getExtension('sandbox'); if (!($sp5d6e82 = $sp2c38ff->isSandboxed())) { $sp2c38ff->enableSandbox(); } } $sp4ac737 = null; try { $sp4ac737 = $spf4b92b->resolveTemplate($spe32893)->render($sp3186fb); } catch (Twig_Error_Loader $spbcee8e) { if (!$spb97f33) { if ($sp47620a && !$sp5d6e82) { $sp2c38ff->disableSandbox(); } throw $spbcee8e; } } if ($sp47620a && !$sp5d6e82) { $sp2c38ff->disableSandbox(); } return $sp4ac737; } function twig_source(Twig_Environment $spf4b92b, $sp3eec35, $spb97f33 = false) { try { return $spf4b92b->getLoader()->getSource($sp3eec35); } catch (Twig_Error_Loader $spbcee8e) { if (!$spb97f33) { throw $spbcee8e; } } } function twig_constant($sp10a98b, $sp941276 = null) { if (null !== $sp941276) { $sp10a98b = get_class($sp941276) . '::' . $sp10a98b; } return constant($sp10a98b); } function twig_array_batch($spe1972e, $sp952a68, $sp4556bb = null) { if ($spe1972e instanceof Traversable) { $spe1972e = iterator_to_array($spe1972e, false); } $sp952a68 = ceil($sp952a68); $sp4ac737 = array_chunk($spe1972e, $sp952a68, true); if (null !== $sp4556bb && !empty($sp4ac737)) { $sp98e909 = count($sp4ac737) - 1; if ($spd902ff = $sp952a68 - count($sp4ac737[$sp98e909])) { $sp4ac737[$sp98e909] = array_merge($sp4ac737[$sp98e909], array_fill(0, $spd902ff, $sp4556bb)); } } return $sp4ac737; }