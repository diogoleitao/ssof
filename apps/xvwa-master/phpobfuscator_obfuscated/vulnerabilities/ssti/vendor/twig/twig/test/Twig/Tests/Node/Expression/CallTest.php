<?php
class Twig_Tests_Node_Expression_CallTest extends PHPUnit_Framework_TestCase { public function testGetArguments() { $spcefb62 = new Twig_Tests_Node_Expression_Call(array(), array('type' => 'function', 'name' => 'date')); $this->assertEquals(array('U', null), $spcefb62->getArguments('date', array('format' => 'U', 'timestamp' => null))); } public function testGetArgumentsWhenPositionalArgumentsAfterNamedArguments() { $spcefb62 = new Twig_Tests_Node_Expression_Call(array(), array('type' => 'function', 'name' => 'date')); $spcefb62->getArguments('date', array('timestamp' => 123456, 'Y-m-d')); } public function testGetArgumentsWhenArgumentIsDefinedTwice() { $spcefb62 = new Twig_Tests_Node_Expression_Call(array(), array('type' => 'function', 'name' => 'date')); $spcefb62->getArguments('date', array('Y-m-d', 'format' => 'U')); } public function testGetArgumentsWithWrongNamedArgumentName() { $spcefb62 = new Twig_Tests_Node_Expression_Call(array(), array('type' => 'function', 'name' => 'date')); $spcefb62->getArguments('date', array('Y-m-d', 'timestamp' => null, 'unknown' => '')); } public function testGetArgumentsWithWrongNamedArgumentNames() { $spcefb62 = new Twig_Tests_Node_Expression_Call(array(), array('type' => 'function', 'name' => 'date')); $spcefb62->getArguments('date', array('Y-m-d', 'timestamp' => null, 'unknown1' => '', 'unknown2' => '')); } public function testResolveArgumentsWithMissingValueForOptionalArgument() { if (defined('HHVM_VERSION')) { $this->markTestSkipped('Skip under HHVM as the behavior is not the same as plain PHP (which is an edge case anyway)'); } $spcefb62 = new Twig_Tests_Node_Expression_Call(array(), array('type' => 'function', 'name' => 'substr_compare')); $spcefb62->getArguments('substr_compare', array('abcd', 'bc', 'offset' => 1, 'case_sensitivity' => true)); } public function testResolveArgumentsOnlyNecessaryArgumentsForCustomFunction() { $spcefb62 = new Twig_Tests_Node_Expression_Call(array(), array('type' => 'function', 'name' => 'custom_function')); $this->assertEquals(array('arg1'), $spcefb62->getArguments(array($this, 'customFunction'), array('arg1' => 'arg1'))); } public function testGetArgumentsForStaticMethod() { $spcefb62 = new Twig_Tests_Node_Expression_Call(array(), array('type' => 'function', 'name' => 'custom_static_function')); $this->assertEquals(array('arg1'), $spcefb62->getArguments(__CLASS__ . '::customStaticFunction', array('arg1' => 'arg1'))); } public function testResolveArgumentsWithMissingParameterForArbitraryArguments() { $spcefb62 = new Twig_Tests_Node_Expression_Call(array(), array('type' => 'function', 'name' => 'foo', 'is_variadic' => true)); $spcefb62->getArguments(array($this, 'customFunctionWithArbitraryArguments'), array()); } public static function customStaticFunction($spf21892, $sp12c685 = 'default', $sp733fb6 = array()) { } public function customFunction($spf21892, $sp12c685 = 'default', $sp733fb6 = array()) { } public function customFunctionWithArbitraryArguments() { } } class Twig_Tests_Node_Expression_Call extends Twig_Node_Expression_Call { public function getArguments($sp9a2590, $spc5cc06) { return parent::getArguments($sp9a2590, $spc5cc06); } }