<?php
class Twig_Tests_Extension_CoreTest extends PHPUnit_Framework_TestCase { public function testRandomFunction($spbb4d96, $sp27135a) { $spf4b92b = new Twig_Environment(); for ($spc83c7f = 0; $spc83c7f < 100; ++$spc83c7f) { $this->assertTrue(in_array(twig_random($spf4b92b, $spbb4d96), $sp27135a, true)); } } public function getRandomFunctionTestData() { return array(array(array('apple', 'orange', 'citrus'), array('apple', 'orange', 'citrus')), array(new ArrayObject(array('apple', 'orange', 'citrus')), array('apple', 'orange', 'citrus')), array('Ä€é', array('Ä', '€', 'é')), array('123', array('1', '2', '3')), array(5, range(0, 5, 1)), array(5.9, range(0, 5, 1)), array(-2, array(0, -1, -2))); } public function testRandomFunctionWithoutParameter() { $spfe8bed = mt_getrandmax(); for ($spc83c7f = 0; $spc83c7f < 100; ++$spc83c7f) { $sp627729 = twig_random(new Twig_Environment()); $this->assertTrue(is_int($sp627729) && $sp627729 >= 0 && $sp627729 <= $spfe8bed); } } public function testRandomFunctionReturnsAsIs() { $this->assertSame('', twig_random(new Twig_Environment(), '')); $this->assertSame('', twig_random(new Twig_Environment(null, array('charset' => null)), '')); $sp42f7d2 = new stdClass(); $this->assertSame($sp42f7d2, twig_random(new Twig_Environment(), $sp42f7d2)); } public function testRandomFunctionOfEmptyArrayThrowsException() { twig_random(new Twig_Environment(), array()); } public function testRandomFunctionOnNonUTF8String() { if (!function_exists('iconv') && !function_exists('mb_convert_encoding')) { $this->markTestSkipped('needs iconv or mbstring'); } $speae043 = new Twig_Environment(); $speae043->setCharset('ISO-8859-1'); $sp486ecf = twig_convert_encoding('Äé', 'ISO-8859-1', 'UTF-8'); for ($spc83c7f = 0; $spc83c7f < 30; ++$spc83c7f) { $sp15c57a = twig_random($speae043, $sp486ecf); $this->assertTrue(in_array(twig_convert_encoding($sp15c57a, 'UTF-8', 'ISO-8859-1'), array('Ä', 'é'), true)); } } public function testReverseFilterOnNonUTF8String() { if (!function_exists('iconv') && !function_exists('mb_convert_encoding')) { $this->markTestSkipped('needs iconv or mbstring'); } $speae043 = new Twig_Environment(); $speae043->setCharset('ISO-8859-1'); $sp693d57 = twig_convert_encoding('Äé', 'ISO-8859-1', 'UTF-8'); $sp35fa7e = twig_convert_encoding(twig_reverse_filter($speae043, $sp693d57), 'UTF-8', 'ISO-8859-1'); $this->assertEquals($sp35fa7e, 'éÄ'); } public function testCustomEscaper() { $speae043 = new Twig_Environment(); $speae043->getExtension('core')->setEscaper('foo', 'foo_escaper_for_test'); $this->assertEquals('fooUTF-8', twig_escape_filter($speae043, 'foo', 'foo')); } public function testUnknownCustomEscaper() { twig_escape_filter(new Twig_Environment(), 'foo', 'bar'); } public function testTwigFirst() { $speae043 = new Twig_Environment(); $this->assertEquals('a', twig_first($speae043, 'abc')); $this->assertEquals(1, twig_first($speae043, array(1, 2, 3))); $this->assertSame('', twig_first($speae043, null)); $this->assertSame('', twig_first($speae043, '')); } public function testTwigLast() { $speae043 = new Twig_Environment(); $this->assertEquals('c', twig_last($speae043, 'abc')); $this->assertEquals(3, twig_last($speae043, array(1, 2, 3))); $this->assertSame('', twig_last($speae043, null)); $this->assertSame('', twig_last($speae043, '')); } } function foo_escaper_for_test(Twig_Environment $spf4b92b, $spa62ef5, $spdc716e) { return $spa62ef5 . $spdc716e; }